<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>谷歌云安装面板与反代</title>
      <link href="/2025/10/01/%E8%B0%B7%E6%AD%8C%E4%BA%91%E5%AE%89%E8%A3%85%E9%9D%A2%E6%9D%BF%E4%B8%8E%E5%8F%8D%E4%BB%A3/"/>
      <url>/2025/10/01/%E8%B0%B7%E6%AD%8C%E4%BA%91%E5%AE%89%E8%A3%85%E9%9D%A2%E6%9D%BF%E4%B8%8E%E5%8F%8D%E4%BB%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-docker环境安装"><a href="#1-docker环境安装" class="headerlink" title="1.docker环境安装"></a>1.docker环境安装</h2><p>1.1 Docker 官方一键安装脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line"><span class="built_in">sudo</span> sh get-docker.sh</span><br></pre></td></tr></table></figure><p>1.2 验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose version</span><br></pre></td></tr></table></figure><h2 id="2-安装并配置nezha面板与openlist"><a href="#2-安装并配置nezha面板与openlist" class="headerlink" title="2.安装并配置nezha面板与openlist"></a>2.安装并配置nezha面板与openlist</h2><p>2.1 一键生成docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; docker-compose.yml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">services:</span></span><br><span class="line"><span class="string">  # 哪吒面板服务</span></span><br><span class="line"><span class="string">  nezha:</span></span><br><span class="line"><span class="string">    container_name: nezha</span></span><br><span class="line"><span class="string">    image: ghcr.io/nezhahq/nezha:latest</span></span><br><span class="line"><span class="string">    network_mode: &quot;host&quot;</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - ./nezha_data:/dashboard/data</span></span><br><span class="line"><span class="string">    restart: unless-stopped</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # openlist服务</span></span><br><span class="line"><span class="string">  openlist:</span></span><br><span class="line"><span class="string">    container_name: openlist</span></span><br><span class="line"><span class="string">    image: openlistteam/openlist:latest</span></span><br><span class="line"><span class="string">    network_mode: &quot;host&quot;</span></span><br><span class="line"><span class="string">    environment:</span></span><br><span class="line"><span class="string">      - TZ=Asia/Shanghai</span></span><br><span class="line"><span class="string">      - OPENLIST_ADMIN_PASSWORD=用户密码 # 修改登陆密码</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - ./oplist_data:/opt/openlist/data</span></span><br><span class="line"><span class="string">    restart: unless-stopped</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>2.2 设置.&#x2F;oplist_data文件夹的权限，确保 Openlist 容器可以正常读写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R 1001:1001 ./oplist_data</span><br></pre></td></tr></table></figure><p>2.3 启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h2 id="3-Caddy2反向代理安装"><a href="#3-Caddy2反向代理安装" class="headerlink" title="3. Caddy2反向代理安装"></a>3. Caddy2反向代理安装</h2><p>在 Debian&#x2F;Ubuntu 系统上安装 Caddy2，可以按照以下步骤操作：</p><p>3.1 安装必要的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y debian-keyring debian-archive-keyring apt-transport-https</span><br></pre></td></tr></table></figure><p>3.2 添加 Caddy 的 GPG 密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -1sLf ‘https://dl.cloudsmith.io/public/caddy/stable/gpg.key’ | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg</span><br></pre></td></tr></table></figure><p>3.3 添加 Caddy 的软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -1sLf ‘https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt’ | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/caddy-stable.list</span><br></pre></td></tr></table></figure><p>3.4 更新软件包列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure><p>3.5 安装 Caddy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install caddy</span><br></pre></td></tr></table></figure><p>3.6 检查Caddy版本，确认安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caddy version</span><br></pre></td></tr></table></figure><h2 id="4-Caddy2配置反向代理"><a href="#4-Caddy2配置反向代理" class="headerlink" title="4. Caddy2配置反向代理"></a>4. Caddy2配置反向代理</h2><p>4.1 编辑 Caddyfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/caddy/Caddyfile</span><br></pre></td></tr></table></figure><p>4.2 粘贴配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 哪吒面板的反向代理配置</span></span><br><span class="line">mb.hxjx.hidns.co &#123;</span><br><span class="line">    reverse_proxy localhost:8008</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Openlist 的反向代理配置</span></span><br><span class="line">oplist.hxjx.hidns.co &#123;</span><br><span class="line">    reverse_proxy localhost:5244</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存并退出 (Ctrl + X -&gt; Y -&gt; Enter)。mb.hxjx.hidns.co、oplist.hxjx.hidns.co为域名并添加了A记录或AAA记录</p><p>4.3 重载 Caddy 配置使其生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl reload caddy</span><br></pre></td></tr></table></figure><p>4.4 其它相关命令：<br>启动 Caddy 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start caddy</span><br></pre></td></tr></table></figure><p>设置 Caddy 开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> caddy</span><br></pre></td></tr></table></figure><p>重启 Caddy 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart caddy</span><br></pre></td></tr></table></figure><p>停止 Caddy 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop caddy</span><br></pre></td></tr></table></figure><p>修改配置文件后重载配置（不中断服务）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reload caddy</span><br></pre></td></tr></table></figure><p>查看 Caddy 运行状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status caddy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker一键迁移恢复启动</title>
      <link href="/2025/09/29/docker%E4%B8%80%E9%94%AE%E8%BF%81%E7%A7%BB%E6%81%A2%E5%A4%8D%E5%90%AF%E5%8A%A8/"/>
      <url>/2025/09/29/docker%E4%B8%80%E9%94%AE%E8%BF%81%E7%A7%BB%E6%81%A2%E5%A4%8D%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="流程示意"><a href="#流程示意" class="headerlink" title="流程示意"></a>流程示意</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">┌──────────────────────────────┐</span><br><span class="line">│        旧服务器 (源)          │</span><br><span class="line">│    正在运行的 Docker 容器     │</span><br><span class="line">└──────────────┬───────────────┘</span><br><span class="line">               │</span><br><span class="line">               │ 执行</span><br><span class="line">               ▼</span><br><span class="line">┌──────────────────────────────┐</span><br><span class="line">│ docker-smart-migrate.sh      │</span><br><span class="line">│ - 收集容器镜像、配置、数据卷   │</span><br><span class="line">│ - 打包 docker_migrate_bundle │</span><br><span class="line">│ - scp 传输到新服务器          │</span><br><span class="line">└──────────────┬───────────────┘</span><br><span class="line">               │</span><br><span class="line">               │ 生成迁移包并传输</span><br><span class="line">               ▼</span><br><span class="line">┌──────────────────────────────┐</span><br><span class="line">│        新服务器 (目标)        │</span><br><span class="line">│   空环境 / 已安装 Docker      │</span><br><span class="line">└──────────────┬───────────────┘</span><br><span class="line">               │</span><br><span class="line">               │ 解包并恢复</span><br><span class="line">               ▼</span><br><span class="line">┌──────────────────────────────┐</span><br><span class="line">│ docker-restore.sh            │</span><br><span class="line">│ - 导入私有镜像 (docker load)  │</span><br><span class="line">│ - 拉取公共镜像 (docker pull)  │</span><br><span class="line">│ - 解压数据卷                  │</span><br><span class="line">└──────────────┬───────────────┘</span><br><span class="line">               │</span><br><span class="line">               │ 生成编排文件</span><br><span class="line">               ▼</span><br><span class="line">┌──────────────────────────────┐</span><br><span class="line">│ gen-compose.sh               │</span><br><span class="line">│ - 读取容器 JSON 配置          │</span><br><span class="line">│ - 生成 docker-compose.yml    │</span><br><span class="line">└──────────────┬───────────────┘</span><br><span class="line">               │</span><br><span class="line">               │ 启动容器</span><br><span class="line">               ▼</span><br><span class="line">┌──────────────────────────────┐</span><br><span class="line">│ docker-compose up -d         │</span><br><span class="line">│ - 按生成的 compose 一键启动   │</span><br><span class="line">└──────────────┬───────────────┘</span><br><span class="line">               │</span><br><span class="line">               │ 验证服务</span><br><span class="line">               ▼</span><br><span class="line">┌──────────────────────────────┐</span><br><span class="line">│ check-containers.sh          │</span><br><span class="line">│ - 检查容器状态/健康检查        │</span><br><span class="line">│ - 确认迁移是否成功             │</span><br><span class="line">└──────────────────────────────┘</span><br></pre></td></tr></table></figure><h3 id="1-迁移"><a href="#1-迁移" class="headerlink" title="1.迁移"></a>1.迁移</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 一键迁移 Docker 容器到新服务器</span></span><br><span class="line"><span class="comment"># 用法: ./docker-smart-migrate.sh &lt;目标服务器用户&gt; &lt;目标服务器IP&gt; &lt;目标目录&gt;</span></span><br><span class="line"></span><br><span class="line">USER=<span class="variable">$1</span></span><br><span class="line">HOST=<span class="variable">$2</span></span><br><span class="line">DEST=<span class="variable">$3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$USER</span>&quot;</span> ] || [ -z <span class="string">&quot;<span class="variable">$HOST</span>&quot;</span> ] || [ -z <span class="string">&quot;<span class="variable">$DEST</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;❌ 参数不足&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;用法: <span class="variable">$0</span> &lt;目标服务器用户&gt; &lt;目标服务器IP&gt; &lt;目标目录&gt;&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p migrate_tmp/images migrate_tmp/volumes migrate_tmp/config</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt; 收集容器信息&quot;</span></span><br><span class="line">docker ps --format <span class="string">&#x27;&#123;&#123;.ID&#125;&#125; &#123;&#123;.Names&#125;&#125;&#x27;</span> | <span class="keyword">while</span> <span class="built_in">read</span> cid cname; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt; 处理容器: <span class="variable">$cname</span>&quot;</span></span><br><span class="line">  img=$(docker inspect --format <span class="string">&#x27;&#123;&#123;.Config.Image&#125;&#125;&#x27;</span> <span class="variable">$cid</span>)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;  镜像: <span class="variable">$img</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 公共镜像跳过，只保存私有镜像</span></span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$img</span>&quot;</span> == *<span class="string">&quot;spg-registry&quot;</span>* || <span class="string">&quot;<span class="variable">$img</span>&quot;</span> == *<span class="string">&quot;gitlab&quot;</span>* ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;  ⏳ 保存镜像: <span class="variable">$img</span>&quot;</span></span><br><span class="line">    docker save -o migrate_tmp/images/<span class="variable">$&#123;cname&#125;</span>.tar <span class="variable">$img</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;  ✅ 公共镜像, 新服务器上直接 pull: <span class="variable">$img</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$img</span>&quot;</span> &gt;&gt; migrate_tmp/images/public_images.txt</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 保存容器配置</span></span><br><span class="line">  docker inspect <span class="variable">$cid</span> &gt; migrate_tmp/config/<span class="variable">$&#123;cname&#125;</span>.json</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 保存挂载卷数据</span></span><br><span class="line">  <span class="keyword">for</span> vol <span class="keyword">in</span> $(docker inspect --format <span class="string">&#x27;&#123;&#123;range .Mounts&#125;&#125;&#123;&#123;.Source&#125;&#125; &#123;&#123;end&#125;&#125;&#x27;</span> <span class="variable">$cid</span>); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$vol</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">      vname=<span class="variable">$&#123;cname&#125;</span>_$(<span class="built_in">basename</span> <span class="variable">$vol</span>)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;  打包数据卷: <span class="variable">$vol</span>&quot;</span></span><br><span class="line">      tar czf migrate_tmp/volumes/<span class="variable">$&#123;vname&#125;</span>.tgz -C $(<span class="built_in">dirname</span> <span class="variable">$vol</span>) $(<span class="built_in">basename</span> <span class="variable">$vol</span>)</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt; 打包迁移文件&quot;</span></span><br><span class="line">tar czf docker_migrate_bundle.tgz migrate_tmp</span><br><span class="line"><span class="built_in">rm</span> -rf migrate_tmp</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt; 传输到目标服务器: <span class="variable">$HOST</span>&quot;</span></span><br><span class="line">ssh <span class="variable">$USER</span>@<span class="variable">$HOST</span> <span class="string">&quot;mkdir -p <span class="variable">$DEST</span>&quot;</span></span><br><span class="line">scp docker_migrate_bundle.tgz <span class="variable">$USER</span>@<span class="variable">$HOST</span>:<span class="variable">$DEST</span>/</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt; 在目标服务器上解压&quot;</span></span><br><span class="line">ssh <span class="variable">$USER</span>@<span class="variable">$HOST</span> <span class="string">&quot;cd <span class="variable">$DEST</span> &amp;&amp; tar xzf docker_migrate_bundle.tgz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;✅ 迁移完成&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;下一步请在新服务器执行: ./docker-restore.sh <span class="variable">$DEST</span>/migrate_tmp&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-恢复"><a href="#2-恢复" class="headerlink" title="2.恢复"></a>2.恢复</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 用法: ./docker-restore.sh &lt;迁移目录&gt;</span></span><br><span class="line"><span class="comment"># 示例: ./docker-restore.sh /opt/docker-migrate/migrate_tmp</span></span><br><span class="line"></span><br><span class="line">SRC=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$SRC</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;❌ 参数不足&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;用法: <span class="variable">$0</span> &lt;迁移目录&gt;&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$SRC</span> || <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt; 1. 导入私有镜像&quot;</span></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> images/*.tar; <span class="keyword">do</span></span><br><span class="line">  [ -f <span class="string">&quot;<span class="variable">$img</span>&quot;</span> ] || <span class="built_in">continue</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;  加载镜像: <span class="variable">$img</span>&quot;</span></span><br><span class="line">  docker load -i <span class="variable">$img</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt; 2. 拉取公共镜像&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -f images/public_images.txt ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">while</span> <span class="built_in">read</span> img; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;  拉取: <span class="variable">$img</span>&quot;</span></span><br><span class="line">    docker pull <span class="variable">$img</span></span><br><span class="line">  <span class="keyword">done</span> &lt; images/public_images.txt</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt; 3. 恢复数据卷&quot;</span></span><br><span class="line"><span class="keyword">for</span> vol <span class="keyword">in</span> volumes/*.tgz; <span class="keyword">do</span></span><br><span class="line">  [ -f <span class="string">&quot;<span class="variable">$vol</span>&quot;</span> ] || <span class="built_in">continue</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;  解压数据卷: <span class="variable">$vol</span>&quot;</span></span><br><span class="line">  tar xzf <span class="variable">$vol</span> -C /</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;✅ 数据和镜像已恢复&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;下一步: ./gen-compose.sh <span class="variable">$SRC</span>/config &gt; docker-compose.yml &amp;&amp; docker-compose up -d&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 用法: ./gen-compose.sh &lt;config目录&gt; &gt; docker-compose.yml</span></span><br><span class="line"></span><br><span class="line">CFG_DIR=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$CFG_DIR</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;❌ 参数不足&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;用法: <span class="variable">$0</span> &lt;config目录&gt;&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;version: &#x27;3.8&#x27;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;services:&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cfg <span class="keyword">in</span> <span class="variable">$CFG_DIR</span>/*.json; <span class="keyword">do</span></span><br><span class="line">  cname=$(<span class="built_in">basename</span> <span class="variable">$cfg</span> .json)</span><br><span class="line">  image=$(jq -r <span class="string">&#x27;.[0].Config.Image&#x27;</span> <span class="variable">$cfg</span>)</span><br><span class="line">  cmd=$(jq -r <span class="string">&#x27;.[0].Path + &quot; &quot; + (.[0].Args|join(&quot; &quot;))&#x27;</span> <span class="variable">$cfg</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;  <span class="variable">$cname</span>:&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;    image: <span class="variable">$image</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line">  ports=$(jq -r <span class="string">&#x27;.[0].HostConfig.PortBindings | to_entries[]? | &quot;- \(.value[0].HostPort):\(.key)&quot;&#x27;</span> <span class="variable">$cfg</span>)</span><br><span class="line">  <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$ports</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;    ports:&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ports</span>&quot;</span> | sed <span class="string">&#x27;s/^/      /&#x27;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 卷</span></span><br><span class="line">  mounts=$(jq -r <span class="string">&#x27;.[0].Mounts[]? | &quot;- \(.Source):\(.Destination)&quot;&#x27;</span> <span class="variable">$cfg</span>)</span><br><span class="line">  <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$mounts</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;    volumes:&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$mounts</span>&quot;</span> | sed <span class="string">&#x27;s/^/      /&#x27;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 环境变量</span></span><br><span class="line">  envs=$(jq -r <span class="string">&#x27;.[0].Config.Env[]? | &quot;- \(. )&quot;&#x27;</span> <span class="variable">$cfg</span>)</span><br><span class="line">  <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$envs</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;    environment:&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$envs</span>&quot;</span> | sed <span class="string">&#x27;s/^/      /&#x27;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 启动命令</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span> != <span class="string">&quot; &quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;    command: <span class="variable">$cmd</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vps搭建typecho博客</title>
      <link href="/2025/09/29/vps%E6%90%AD%E5%BB%BAtypecho%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/09/29/vps%E6%90%AD%E5%BB%BAtypecho%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="video-container"><iframe width="560" height="315" src="https://www.youtube.com/embed/AHpGphE-XC8?si=stg73B9WBwCKLdby" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe></div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h2 id="一、准备条件"><a href="#一、准备条件" class="headerlink" title="一、准备条件"></a>一、准备条件</h2><h3 id="1-一台服务器或者NAS-理论上只有其他NAS都可以"><a href="#1-一台服务器或者NAS-理论上只有其他NAS都可以" class="headerlink" title="1. 一台服务器或者NAS(理论上只有其他NAS都可以)"></a>1. 一台服务器或者NAS(理论上只有其他NAS都可以)</h3><h3 id="2-本项目使用到的开源项目"><a href="#2-本项目使用到的开源项目" class="headerlink" title="2. 本项目使用到的开源项目"></a>2. 本项目使用到的开源项目</h3><p><a href="https://github.com/typecho/typecho">https://github.com/typecho/typecho</a></p><h3 id="3-域名-可选"><a href="#3-域名-可选" class="headerlink" title="3. 域名(可选)"></a>3. 域名(可选)</h3><h2 id="二、vps上搭建"><a href="#二、vps上搭建" class="headerlink" title="二、vps上搭建"></a>二、vps上搭建</h2><h3 id="1-docker环境安装"><a href="#1-docker环境安装" class="headerlink" title="1. docker环境安装"></a>1. docker环境安装</h3><p>1.1 docker安装脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://cdn.jsdelivr.net/gh/SuperManito/LinuxMirrors@main/DockerInstallation.sh)</span><br></pre></td></tr></table></figure><p>1.2 docker-compose安装脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose &amp;&amp; <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="2-创建docker-compose-yml文件"><a href="#2-创建docker-compose-yml文件" class="headerlink" title="2. 创建docker-compose.yml文件"></a>2. 创建docker-compose.yml文件</h3><p>2.1 安装方法1：</p><ul><li>创建docker-compose.yml文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> typecho;<span class="built_in">cd</span> typecho <span class="comment">#创建一个目录，并进入此目录</span></span><br></pre></td></tr></table></figure></li><li>编辑docker-compose.yml  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>按i进入编辑模式，粘贴如下内容：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">typecho:  <span class="comment"># Typecho 博客服务</span></span><br><span class="line">  image: joyqi/typecho:nightly-php8.2-apache  <span class="comment"># 官方 Apache 镜像</span></span><br><span class="line">  container_name: typecho</span><br><span class="line">  ports:</span><br><span class="line">    - <span class="string">&quot;8383:80&quot;</span>  <span class="comment"># 宿主机 8080 -&gt; 容器 80</span></span><br><span class="line">  environment:</span><br><span class="line">    TZ: Asia/Shanghai  <span class="comment"># 设置时区为上海</span></span><br><span class="line">  volumes:</span><br><span class="line">    - ./typecho/app/usr:/app/usr  <span class="comment"># 当前目录存放 Typecho 文件</span></span><br><span class="line">  depends_on:</span><br><span class="line">    - db  <span class="comment"># 依赖数据库</span></span><br><span class="line">  restart: always  <span class="comment"># 自动重启策略</span></span><br><span class="line"></span><br><span class="line">db:  <span class="comment"># 数据库服务</span></span><br><span class="line">  image: mariadb:10.6  <span class="comment"># MariaDB 镜像</span></span><br><span class="line">  container_name: typecho-db</span><br><span class="line">  environment:</span><br><span class="line">    MYSQL_ROOT_PASSWORD: root_password  <span class="comment"># 数据库 root 密码（请修改）</span></span><br><span class="line">    MYSQL_DATABASE: typecho  <span class="comment"># 默认数据库</span></span><br><span class="line">    MYSQL_USER: typecho  <span class="comment"># 数据库用户</span></span><br><span class="line">    MYSQL_PASSWORD: typecho_password  <span class="comment"># 用户密码（请修改）</span></span><br><span class="line">    TZ: Asia/Shanghai  <span class="comment"># 时区</span></span><br><span class="line">  volumes:</span><br><span class="line">    - ./db:/var/lib/mysql  <span class="comment"># 数据库数据存放当前目录</span></span><br><span class="line">  restart: always</span><br></pre></td></tr></table></figure></li></ul><p>2.2 安装方法2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; docker-compose.yml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">services:</span></span><br><span class="line"><span class="string">  typecho:  # Typecho 博客服务</span></span><br><span class="line"><span class="string">    image: joyqi/typecho:nightly-php8.2-apache  # 官方 Apache 镜像</span></span><br><span class="line"><span class="string">    container_name: typecho</span></span><br><span class="line"><span class="string">    ports:</span></span><br><span class="line"><span class="string">      - &quot;8383:80&quot;  # 宿主机 8080 -&gt; 容器 80</span></span><br><span class="line"><span class="string">    environment:</span></span><br><span class="line"><span class="string">      TZ: Asia/Shanghai  # 设置时区为上海</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - ./typecho/app/usr:/app/usr  # 当前目录存放 Typecho 文件</span></span><br><span class="line"><span class="string">    depends_on:</span></span><br><span class="line"><span class="string">      - db  # 依赖数据库</span></span><br><span class="line"><span class="string">    restart: always  # 自动重启策略</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  db:  # 数据库服务</span></span><br><span class="line"><span class="string">    image: mariadb:10.6  # MariaDB 镜像</span></span><br><span class="line"><span class="string">    container_name: typecho-db</span></span><br><span class="line"><span class="string">    environment:</span></span><br><span class="line"><span class="string">      MYSQL_ROOT_PASSWORD: root_password  # 数据库 root 密码（请修改）</span></span><br><span class="line"><span class="string">      MYSQL_DATABASE: typecho  # 默认数据库</span></span><br><span class="line"><span class="string">      MYSQL_USER: typecho  # 数据库用户</span></span><br><span class="line"><span class="string">      MYSQL_PASSWORD: typecho_password  # 用户密码（请修改）</span></span><br><span class="line"><span class="string">      TZ: Asia/Shanghai  # 时区</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - ./db:/var/lib/mysql  # 数据库数据存放当前目录</span></span><br><span class="line"><span class="string">    restart: always</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="3-执行容器运行命令"><a href="#3-执行容器运行命令" class="headerlink" title="3.执行容器运行命令"></a>3.执行容器运行命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d <span class="comment">#运行容器</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps  <span class="comment">#查看是否开启成功</span></span><br></pre></td></tr></table></figure><p>正常显示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br><span class="line">NAME         IMAGE                                 COMMAND                  SERVICE   CREATED         STATUS         PORTS</span><br><span class="line">typecho      joyqi/typecho:nightly-php8.2-apache   <span class="string">&quot;docker-php-entrypoi…&quot;</span>   typecho   8 minutes ago   Up 8 minutes   0.0.0.0:8383-&gt;80/tcp, [::]:8383-&gt;80/tcp</span><br><span class="line">typecho-db   mariadb:10.6                   </span><br></pre></td></tr></table></figure><h3 id="4-cloudflare配置域名端口"><a href="#4-cloudflare配置域名端口" class="headerlink" title="4. cloudflare配置域名端口"></a>4. cloudflare配置域名端口</h3><p>4.1 域名dns添加AAAA记录或A记录<br>4.2 创建规则</p><ul><li><p>规则名称 </p></li><li><p>当传入请求匹配时</p><table><thead><tr><th>字段</th><th>运算符</th><th>值</th></tr></thead><tbody><tr><td>主机名</td><td>等于</td><td>域名</td></tr></tbody></table></li><li><p>目标端口重写到</p><p>8383</p></li></ul><h3 id="5-打开web页面使用"><a href="#5-打开web页面使用" class="headerlink" title="5. 打开web页面使用"></a>5. 打开web页面使用</h3><p>成功以后需要打开自己相应的端口(8383)防火墙就可以web端访问了<br>ip:8383或端口回源域名访问</p><p>5.1 初始化开始<br><img src="https://img.hxjx.hidns.co/file/AgACAgUAAyEGAASfZU2vAAIBYWjaPy9d5jfkx088VyOcGkV1mfEaAALSxzEbboHRVh53wwG59oG4AQADAgADdwADNgQ.png?text=1" alt="1"></p><p>5.2 下一步-根据图示配置数据库信息<br><img src="https://img.hxjx.hidns.co/file/AgACAgUAAyEGAASfZU2vAAIBYmjaQAP48_lyUXVSgiq4iYqYezNCAALTxzEbboHRVrQkxwiQ8eKDAQADAgADdwADNgQ.png" alt="2"></p><p>5.3 配置管理员信息<br><img src="https://img.hxjx.hidns.co/file/AgACAgUAAyEGAASfZU2vAAIBY2jaQEYyT9rHd94jeUDkMczg7phHAALUxzEbboHRVhPR0_HlJbgjAQADAgADdwADNgQ.png" alt="3"></p><p>5.4 安装成功<br><img src="https://img.hxjx.hidns.co/file/AgACAgUAAyEGAASfZU2vAAIBZGjaQHmvLbfT1x33biEH5Wsw8ck4AALVxzEbboHRVndcydxuJoe0AQADAgADdwADNgQ.png" alt="4"></p><p>5.5 管理后台<br><img src="https://img.hxjx.hidns.co/file/AgACAgUAAyEGAASfZU2vAAIBZWjaQOtrSdMbow97CBLnrlsWOsIcAALWxzEbboHRVv_yVwG-Eg4NAQADAgADdwADNgQ.png" alt="5"></p><p>5.6 站点logo</p><p>控制台-外观-外观设置<br><img src="https://img.hxjx.hidns.co/file/AgACAgUAAyEGAASfZU2vAAIBZmjaQbtST1INp5GzXBZabrfMh9QKAALixzEbboHRVpIz551AJfqcAQADAgADdwADNgQ.jpg" alt="6"></p><p>5.7 网站favicon<br>编辑 header.php 文件</p><p>在您的服务器上，找到并编辑这个文件：.&#x2F;typecho&#x2F;app&#x2F;usr&#x2F;themes&#x2F;你正在使用的主题名&#x2F;header.php。</p><p>在文件的<code>&lt;head&gt;</code>和<code>&lt;/head&gt;</code>标签之间，找到一个合适的位置（比如在 <code>&lt;title&gt;</code> 标签下面），添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://img.hxjx.hidns.co/file/BQACAgUAAyEGAASfZU2vAAIBYGjaLdVus_kuz1NBlSKeEiC7BFQaAAK2GAACboHRVs15w3-rQqIZNgQ.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存 header.php 文件的修改。现在您的网站应该就会显示新的 Favicon 了。<br><img src="https://img.hxjx.hidns.co/file/AgACAgUAAyEGAASfZU2vAAIBZ2jaRlwSIJ84tJBRaJF3ha_tg_F5AALyxzEbboHRVngTg0s7bjcvAQADAgADeQADNgQ.jpg" alt="7"></p>]]></content>
      
      
      <categories>
          
          <category> 技术,学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床</title>
      <link href="/2025/09/27/%E5%9B%BE%E5%BA%8A/"/>
      <url>/2025/09/27/%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>我的图床<br><img src="https://img.hxjx.hidns.co/file/AgACAgUAAyEGAASfZU2vAAIBXWjXvYneXsia4HwQzitTBOazaGrUAAKBxTEbWZnAVnlawXnEQ7cVAQADAgADdwADNgQ.jpg" alt="alt text" title="粉红依人" width="" height="" style=""></p><p><img src="https://img.hxjx.hidns.co/file/AgACAgUAAyEGAASfZU2vAAIBXmjXv0OEqQAB28qmyR7NkVmp_-pbCAACh8UxG1mZwFZMSlJKHz7YAgEAAwIAA3cAAzYE.jpg?text=Logo" alt="鱼"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 GitHub Actions 自动同步仓库详细步骤</title>
      <link href="/2025/09/26/2025.09.08_%E4%BD%BF%E7%94%A8-github-actions-%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E4%BB%93%E5%BA%93%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
      <url>/2025/09/26/2025.09.08_%E4%BD%BF%E7%94%A8-github-actions-%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E4%BB%93%E5%BA%93%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<p><strong>准备工作：明确你的仓库</strong></p><p>●主仓库 (Source Repo)：这是你平时主要推送代码的仓库，也是触发自动同步的仓库。我们称之为 Repo-A。</p><p>●目标仓库 (Target Repo)：这是需要被动接收更新的仓库。可以是一个或多个。我们称之为 Repo-B, Repo-C 等。</p><p><strong>第一步：生成专用的 SSH 密钥</strong></p><p>为了安全，我们不使用你个人的 SSH 密钥，而是为这个自动化流程生成一个全新的、专用的密钥。</p><ol><li>打开你电脑上的终端（Terminal、Git Bash 或 PowerShell）。</li><li>首先，确保 .ssh 文件夹存在。 在终端运行以下命令，如果文件夹不存在，它会帮你创建：</li></ol><ul><li><p>Windows (在 PowerShell 中运行):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (-not (Test-Path &quot;$env:USERPROFILE\.ssh&quot;)) &#123; New-Item -Path &quot;$env:USERPROFILE\.ssh&quot; -ItemType Directory &#125;</span><br></pre></td></tr></table></figure></li><li><p>Mac &#x2F; Linux:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>接下来，运行相应的命令来为第一个目标仓库 (Repo-B) 生成密钥文件：</li></ol><ul><li><p>Windows (在 PowerShell 中运行):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;github-actions-1&quot; -f &quot;$env:USERPROFILE\.ssh\actions_repo_1&quot;</span><br></pre></td></tr></table></figure></li><li><p>Mac &#x2F; Linux:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;github-actions-sync-repo-b&quot; -f ~/.ssh/actions_sync_key_repo_b</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>终端会提示你输入密码 (Enter passphrase)。请直接按回车键。</p></li><li><p>接着会提示你再次输入密码确认 (Enter same passphrase again)。请再次按回车键。</p><p>重要提示： 如果你有多个目标仓库（例如 Repo-C），你需要为每一个目标仓库重复第 3-5 步，并为每个密钥文件使用不同的名称（例如 actions_sync_key_repo_c）。</p></li></ol><p><strong>第二步：在“目标仓库”中配置部署密钥 (Deploy Key)</strong></p><p>你需要让每一个目标仓库信任我们为它生成的那个专属密钥，并给予写入权限。</p><ol><li>首先，获取为 Repo-B 生成的公钥内容。</li></ol><ul><li><p>Windows (在 PowerShell 中运行):  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-Content $env:USERPROFILE\.ssh\actions_repo_1.pub | Set-Clipboard</span><br></pre></td></tr></table></figure></li><li><p>Mac &#x2F; Linux:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/actions_sync_key_repo_b.pub</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>打开浏览器，进入你的目标仓库 Repo-B 的 GitHub 页面。</p></li><li><p>进入 Settings &gt; Security &gt; Deploy keys。</p></li><li><p>点击 Add deploy key，在 Key 字段中粘贴刚刚复制的公钥内容，并勾选 Allow write access。</p><p>重要提示： 如果你有第二个目标仓库 Repo-C，你需要获取为 Repo-C 生成的那个独一无二的公钥（例如 actions_sync_key_repo_c.pub），并将其添加到 Repo-C 的 Deploy Keys 设置中。绝不要复用 Repo-B 的密钥。</p></li></ol><p><strong>第三步：在“主仓库”中配置秘密 (Secret)</strong></p><p>现在，你需要将所有生成的私钥安全地存放在主仓库 Repo-A 中。</p><ol><li>首先，获取为 Repo-B 生成的私钥内容。运行以下命令来查看并复制：</li></ol><ul><li><p>Windows (在 PowerShell 中运行):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-Content $env:USERPROFILE\.ssh\actions_repo_1 | Set-Clipboard</span><br></pre></td></tr></table></figure></li><li><p>Mac &#x2F; Linux:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/actions_sync_key_repo_b</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>将获取到的私钥内容添加到 Repo-A 的 Settings &gt; Secrets and variables &gt; Actions 中。</li></ol><ul><li>Secret 名称: REPO_B_SSH_PRIVATE_KEY</li><li>Secret 内容: (粘贴你刚刚复制的私钥内容)<br>重要提示： 如果你有第二个目标仓库 Repo-C，你需要将为 Repo-C 生成的那个独一无二的私钥（例如 actions_sync_key_repo_c），添加为一个新的 Secret。请确保为它起一个唯一的名字，例如 REPO_C_SSH_PRIVATE_KEY。</li></ul><p><strong>第四步：在“主仓库”中创建 Workflow 文件</strong><br>最后一步，我们需要在主仓库 Repo-A 中创建一个文件，告诉 GitHub Actions 具体要做什么。我们现在将使用一个自定义脚本来推送代码，以便在推送前移除工作流文件。</p><ol><li><p>在你的本地 Repo-A 仓库的根目录下，创建 .github&#x2F;workflows&#x2F;sync-repos.yml 文件。</p></li><li><p>将下面的 YAML 代码复制并粘贴到 sync-repos.yml 文件中。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"># 文件名: .github/workflows/sync-repos.yml</span><br><span class="line">name: Sync to Other Repositories</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main # 只在推送到 main 分支时触发</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  sync:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      # 步骤0：签出（下载）主仓库的程式码</span><br><span class="line">      - name: Checkout Main Repo</span><br><span class="line">        uses: actions/checkout@v3</span><br><span class="line">        with:</span><br><span class="line">          fetch-depth: 0</span><br><span class="line"></span><br><span class="line">      # 新增步骤：安装 git-filter-repo 工具</span><br><span class="line">      - name: Install git-filter-repo</span><br><span class="line">        run: pip3 install git-filter-repo</span><br><span class="line"></span><br><span class="line">      # 步骤1：推送到你的第1个目标仓库，并排除工作流文件夹</span><br><span class="line">      - name: Push to Target Repository 1</span><br><span class="line">        run: |</span><br><span class="line">          # 清理旧的临时目录，确保环境干净</span><br><span class="line">          rm -rf ../repo-clone</span><br><span class="line"></span><br><span class="line">          # 设置 SSH 环境</span><br><span class="line">          mkdir -p ~/.ssh</span><br><span class="line">          echo &quot;$&#123;&#123; secrets.XUHXJX &#125;&#125;&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line"></span><br><span class="line">          # 克隆当前仓库到一个临时目录</span><br><span class="line">          git clone . ../repo-clone</span><br><span class="line">          cd ../repo-clone</span><br><span class="line"></span><br><span class="line">          # 使用 git-filter-repo 工具移除 .github/workflows 文件夹</span><br><span class="line">          git-filter-repo --path .github/workflows --invert-paths --force</span><br><span class="line"></span><br><span class="line">          # 重新添加一个名为 origin 的远程地址，指向目标仓库</span><br><span class="line">          git remote add origin git@github.com:xuhxjx/SSS2.git</span><br><span class="line"></span><br><span class="line">          # 以镜像模式推送处理后的代码到目标仓库</span><br><span class="line">          git push --mirror origin</span><br><span class="line">          </span><br><span class="line">      # 步骤2：推送到你的第2个目标仓库，并排除工作流文件夹</span><br><span class="line">      - name: Push to Target Repository 2</span><br><span class="line">        if: success() # 仅在前一步成功时执行</span><br><span class="line">        run: |</span><br><span class="line">          # 清理旧的临时目录，确保环境干净</span><br><span class="line">          rm -rf ../repo-clone</span><br><span class="line"></span><br><span class="line">          # 设置 SSH 环境</span><br><span class="line">          mkdir -p ~/.ssh</span><br><span class="line">          echo &quot;$&#123;&#123; secrets.MSHXJX &#125;&#125;&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line"></span><br><span class="line">          # 克隆当前仓库到一个临时目录</span><br><span class="line">          # 注意：这里我们从原始的检出目录重新克隆</span><br><span class="line">          cd $GITHUB_WORKSPACE </span><br><span class="line">          git clone . ../repo-clone</span><br><span class="line">          cd ../repo-clone</span><br><span class="line"></span><br><span class="line">          # 移除 .github/workflows 文件夹</span><br><span class="line">          git-filter-repo --path .github/workflows --invert-paths --force</span><br><span class="line"></span><br><span class="line">          # 重新添加一个名为 origin 的远程地址，指向目标仓库</span><br><span class="line">          git remote add origin git@github.com:msxhjx/SSS2.git</span><br><span class="line"></span><br><span class="line">          # 以镜像模式推送处理后的代码到目标仓库</span><br><span class="line">          git push --mirror origin</span><br><span class="line"></span><br><span class="line">      - name: Push to Target Repository 3</span><br><span class="line">        if: success() # 仅在前一步成功时执行</span><br><span class="line">        run: |</span><br><span class="line">          # 清理旧的临时目录，确保环境干净</span><br><span class="line">          rm -rf ../repo-clone</span><br><span class="line"></span><br><span class="line">          # 设置 SSH 环境</span><br><span class="line">          mkdir -p ~/.ssh</span><br><span class="line">          echo &quot;$&#123;&#123; secrets.HXJXHK &#125;&#125;&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line"></span><br><span class="line">          # 克隆当前仓库到一个临时目录</span><br><span class="line">          # 注意：这里我们从原始的检出目录重新克隆</span><br><span class="line">          cd $GITHUB_WORKSPACE </span><br><span class="line">          git clone . ../repo-clone</span><br><span class="line">          cd ../repo-clone</span><br><span class="line"></span><br><span class="line">          # 移除 .github/workflows 文件夹</span><br><span class="line">          git-filter-repo --path .github/workflows --invert-paths --force</span><br><span class="line"></span><br><span class="line">          # 重新添加一个名为 origin 的远程地址，指向目标仓库</span><br><span class="line">          git remote add origin git@github.com:hxjxhk/SSS2.git</span><br><span class="line"></span><br><span class="line">          # 以镜像模式推送处理后的代码到目标仓库</span><br><span class="line">          git push --mirror origin          </span><br><span class="line"></span><br><span class="line">      - name: Push to Target Repository 4</span><br><span class="line">        if: success() # 仅在前一步成功时执行</span><br><span class="line">        run: |</span><br><span class="line">          # 清理旧的临时目录，确保环境干净</span><br><span class="line">          rm -rf ../repo-clone</span><br><span class="line"></span><br><span class="line">          # 设置 SSH 环境</span><br><span class="line">          mkdir -p ~/.ssh</span><br><span class="line">          echo &quot;$&#123;&#123; secrets.HXJX2266 &#125;&#125;&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line"></span><br><span class="line">          # 克隆当前仓库到一个临时目录</span><br><span class="line">          # 注意：这里我们从原始的检出目录重新克隆</span><br><span class="line">          cd $GITHUB_WORKSPACE </span><br><span class="line">          git clone . ../repo-clone</span><br><span class="line">          cd ../repo-clone</span><br><span class="line"></span><br><span class="line">          # 移除 .github/workflows 文件夹</span><br><span class="line">          git-filter-repo --path .github/workflows --invert-paths --force</span><br><span class="line"></span><br><span class="line">          # 重新添加一个名为 origin 的远程地址，指向目标仓库</span><br><span class="line">          git remote add origin git@github.com:hxjx2266/SSS2.git</span><br><span class="line"></span><br><span class="line">          # 以镜像模式推送处理后的代码到目标仓库</span><br><span class="line">          git push --mirror origin</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改关键信息：根据你自己的用户名和仓库名，修改 YAML 文件中每一处的 <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#x69;&#x74;&#104;&#117;&#98;&#46;&#99;&#x6f;&#109;">git@github.com</a>:YourUsername&#x2F;repo-b.git 等 URL 地址。</p></li><li><p>保存文件，然后将这些新的文件提交并推送到你的主仓库 Repo-A。</p></li></ol><p><strong>第五步：测试与验证</strong>  </p><p>推送完成后，进入你的主仓库 Repo-A 的 Actions 标签页，检查工作流是否成功运行。如果成功，你的代码应该已经被同步到所有配置的目标仓库中了，并且目标仓库里不会包含 .github&#x2F;workflows 文件夹。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vps拾建节点相关总结</title>
      <link href="/2025/09/26/2025.09.07_vps%E6%8B%BE%E5%BB%BA%E8%8A%82%E7%82%B9%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/"/>
      <url>/2025/09/26/2025.09.07_vps%E6%8B%BE%E5%BB%BA%E8%8A%82%E7%82%B9%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="安装unzip"><a href="#安装unzip" class="headerlink" title="安装unzip"></a>安装unzip</h3></li></ul><ol><li><p>对于 Debian &#x2F; Ubuntu &#x2F; Armbian 系统 (最常见):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y unzip</span><br></pre></td></tr></table></figure></li><li><p>对于 CentOS &#x2F; RHEL &#x2F; Fedora 系统:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y unzip</span><br></pre></td></tr></table></figure></li><li><p>对于 Alpine Linux 系统:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add unzipz</span><br></pre></td></tr></table></figure></li></ol><ul><li><h3 id="vps安装节点示例"><a href="#vps安装节点示例" class="headerlink" title="vps安装节点示例"></a>vps安装节点示例</h3></li></ul><ol><li><p>勇哥agsb </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hypt=&quot;&quot; tupt=&quot;&quot; vmpt=&quot;2036&quot; uuid=&quot;e108af27-403e-4fb0-8261-501eaac40ddc&quot; argo=&quot;y&quot; agn=&quot;sjc.jxhx.qzz.io&quot; agk=&quot;eyJhIjoiZTc3YmRhZWJjYTBlZjMyNjRmYjUxNTZkNmMwYjUwYWUiLCJ0IjoiMGE2OWFiYjEtZDE0ZS00ODhkLWIzOGEtZTE5NTQzZjJiMzZlIiwicyI6Ik1tVTRNak5rTlRndE1EVmpOeTAwTmpVeUxUbGxZV1F0TldKbE5HWmhNbVF6WWpNdyJ9&quot; bash &lt;(curl -Ls https://raw.githubusercontent.com/yonggekkk/argosbx/main/argosb.sh)</span><br></pre></td></tr></table></figure></li><li><p>老王</p><p>PORT&#x3D;开放的端口 确保后面3个端口可用 CFIP为优选IP或优选域名，CFPORT为优选ip或优选域名对应的端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PORT=你的端口 CFIP=www.visa.com.tw CFPORT=443 bash &lt;(curl -Ls https://raw.githubusercontent.com/eooce/sing-box/main/sing-box.sh)</span><br></pre></td></tr></table></figure><p>ssh综合工具箱一键脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/eooce/ssh_tool/main/ssh_tool.sh -o ssh_tool.sh &amp;&amp; chmod +x ssh_tool.sh &amp;&amp; ./ssh_tool.sh</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 GitHub Actions 自动部署多个 Cloudflare Pages 项目</title>
      <link href="/2025/09/26/2025.09.08_%E4%BD%BF%E7%94%A8-github-actions-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA-cloudflare-pages-%E9%A1%B9%E7%9B%AE/"/>
      <url>/2025/09/26/2025.09.08_%E4%BD%BF%E7%94%A8-github-actions-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA-cloudflare-pages-%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>核心组件</strong>  </p><ul><li>GitHub Actions: 用于执行自动化流程的 CI&#x2F;CD 工具。</li><li>Cloudflare API 令牌 (API Token): 用于授权 GitHub Actions 操作您的 Cloudflare 账户资源，比全局API密钥更安全、更推荐。</li><li>GitHub Secrets: 用于安全地存储您的 API 令牌和账户ID，避免敏感信息暴露在代码中。</li></ul><h2 id="步骤一：创建-Cloudflare-API-令牌"><a href="#步骤一：创建-Cloudflare-API-令牌" class="headerlink" title="步骤一：创建 Cloudflare API 令牌"></a>步骤一：创建 Cloudflare API 令牌</h2><p><em>为了实现最佳的便利性和安全性，我们创建一个可以管理您名下所有账户的用户API令牌。</em></p><ol><li>登录 Cloudflare。  </li><li>点击右上角您的头像，选择 “My Profile” (我的个人资料)。</li><li>在左侧菜单选择 “API Tokens” (API令牌)，然后点击 “创建令牌 (Create Token)”。</li><li>创建自定义令牌：点击 “创建自定义令牌 (Create Custom Token)” 下面的 “开始 (Get started)” 按钮。</li><li>配置权限 (Permissions)：这是最关键的一步，我们只授予部署所需的最小权限。<br>在权限表格中，添加以下唯一一行权限：<table><thead><tr><th align="left">权限组</th><th align="left">资源</th><th align="left">权限级别</th></tr></thead><tbody><tr><td align="left">账户 (Account)</td><td align="left">Cloudflare Pages</td><td align="left">编辑 (Edit)</td></tr></tbody></table></li><li>配置账户资源 (Account Resources)：为了让这个令牌能“通用”，请确保设置为：<br>包括 (Include) → 该用户所属的所有账户 (All accounts this user is a member of)</li><li>检查限制（重要）：<br>IP地址过滤 (IP Address Filtering)：请确保此项为空，不要填写任何IP地址，否则GitHub Actions服务器将无法使用。<br>TTL &#x2F; 有效期 (End Date)：建议将结束日期留空，使其永不过期，以防自动化流程突然中断。</li><li>点击 “创建令牌 (Create Token)”，然后立刻复制新生成的令牌值，此值只会出现一次。</li></ol><h2 id="步骤二：配置-GitHub-Secrets"><a href="#步骤二：配置-GitHub-Secrets" class="headerlink" title="步骤二：配置 GitHub Secrets"></a>步骤二：配置 GitHub Secrets</h2><p><em>进入您需要部署的 GitHub 仓库，点击 Settings &gt; Secrets and variables &gt; Actions，添加以下所有必需的密钥。</em></p><table><thead><tr><th>Secret名称</th><th>对应的值</th><th>描述</th></tr></thead><tbody><tr><td>cf_hxjx_a</td><td>账户A的API令牌</td><td>可以使用您上一步创建的那个“通用”令牌</td></tr><tr><td>id_hxjx_a</td><td>账户A的账户ID(Account ID)</td><td>可以在Cloudflare账户主页右下角找到</td></tr><tr><td>cf_hxjx_b</td><td>账户B的API令牌</td><td>可以使用您上一步创建的那个“通用”令牌</td></tr><tr><td>id_hxjx_b</td><td>账户B的账户ID(Account ID)</td><td>可以在Cloudflare账户主页右下角找到</td></tr><tr><td>cf_hxjx_c</td><td>账户C的API令牌</td><td>可以使用您上一步创建的那个“通用”令牌</td></tr><tr><td>id_hxjx_c</td><td>账户C的账户ID(Account ID)</td><td>可以在Cloudflare账户主页右下角找到</td></tr></tbody></table><h2 id="步骤三：编写GitHub-Actions-Workflow文件"><a href="#步骤三：编写GitHub-Actions-Workflow文件" class="headerlink" title="步骤三：编写GitHub Actions Workflow文件"></a>步骤三：编写GitHub Actions Workflow文件</h2><p><em>在您的代码仓库根目录下，创建 .github&#x2F;workflows&#x2F; 文件夹（如果不存在的话），然后在其中创建一个名为 deploy.yml 的文件。将以下最终的、经过验证的正确代码完整复制进去。</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>: <span class="title class_">Deploy</span> <span class="title class_">Cloudflare</span> <span class="title class_">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on</span>:</span><br><span class="line">  <span class="attr">push</span>:</span><br><span class="line">    <span class="attr">branches</span>:</span><br><span class="line">      - main</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs</span>:</span><br><span class="line">  # 任务一：部署到账户 A</span><br><span class="line">  <span class="attr">deploy_account_A</span>:</span><br><span class="line">    runs-<span class="attr">on</span>: ubuntu-latest</span><br><span class="line">    <span class="attr">steps</span>:</span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Checkout</span> code</span><br><span class="line">        <span class="attr">uses</span>: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Deploy</span> to <span class="title class_">Account</span> A </span><br><span class="line">        <span class="attr">if</span>: github.<span class="property">ref</span> == <span class="string">&#x27;refs/heads/main&#x27;</span></span><br><span class="line">        <span class="attr">run</span>: npx wrangler pages deploy . --project-name=<span class="string">&quot;2520sss2&quot;</span></span><br><span class="line">        <span class="attr">env</span>:</span><br><span class="line">          <span class="attr">CLOUDFLARE_API_TOKEN</span>: $&#123;&#123; secrets.<span class="property">tk_hxjxaa</span> &#125;&#125;</span><br><span class="line">          <span class="attr">CLOUDFLARE_ACCOUNT_ID</span>: $&#123;&#123; secrets.<span class="property">id_hxjxaa</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">  # 任务二：部署到账户 B</span><br><span class="line">  <span class="attr">deploy_account_B</span>:</span><br><span class="line">    <span class="attr">needs</span>: deploy_account_A</span><br><span class="line">    runs-<span class="attr">on</span>: ubuntu-latest</span><br><span class="line">    <span class="attr">steps</span>:</span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Checkout</span> code</span><br><span class="line">        <span class="attr">uses</span>: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Deploy</span> to <span class="title class_">Account</span> B </span><br><span class="line">        <span class="attr">if</span>: github.<span class="property">ref</span> == <span class="string">&#x27;refs/heads/main&#x27;</span></span><br><span class="line">        <span class="attr">run</span>: npx wrangler pages deploy . --project-name=<span class="string">&quot;2521sss2&quot;</span></span><br><span class="line">        <span class="attr">env</span>:</span><br><span class="line">          <span class="attr">CLOUDFLARE_API_TOKEN</span>: $&#123;&#123; secrets.<span class="property">tk_hxjxaaa</span> &#125;&#125;</span><br><span class="line">          <span class="attr">CLOUDFLARE_ACCOUNT_ID</span>: $&#123;&#123; secrets.<span class="property">id_hxjxaaa</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">  # 任务三：部署到账户 <span class="title function_">C</span> (这是新增的部分)</span><br><span class="line">  <span class="attr">deploy_account_C</span>:</span><br><span class="line">    <span class="attr">needs</span>: deploy_account_B # 确保在任务B成功后，此任务才会开始</span><br><span class="line">    runs-<span class="attr">on</span>: ubuntu-latest</span><br><span class="line">    <span class="attr">steps</span>:</span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Checkout</span> code</span><br><span class="line">        <span class="attr">uses</span>: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Deploy</span> to <span class="title class_">Account</span> C </span><br><span class="line">        <span class="attr">if</span>: github.<span class="property">ref</span> == <span class="string">&#x27;refs/heads/main&#x27;</span></span><br><span class="line">        <span class="attr">run</span>: npx wrangler pages deploy . --project-name=<span class="string">&quot;2522sss2&quot;</span> # &lt;-- 替换成您第三个项目的名称</span><br><span class="line">        <span class="attr">env</span>:</span><br><span class="line">          <span class="attr">CLOUDFLARE_API_TOKEN</span>: $&#123;&#123; secrets.<span class="property">tk_hxjxab</span> &#125;&#125;      # &lt;-- 使用您为账户C创建的新密钥</span><br><span class="line">          <span class="attr">CLOUDFLARE_ACCOUNT_ID</span>: $&#123;&#123; secrets.<span class="property">id_hxjxab</span> &#125;&#125;       # &lt;-- 使用您为账户C创建的新密钥</span><br><span class="line"></span><br><span class="line">   # 任务三：部署到账户 <span class="title function_">D</span> (这是新增的部分)</span><br><span class="line">  <span class="attr">deploy_account_D</span>:</span><br><span class="line">    <span class="attr">needs</span>: deploy_account_C # 确保在任务C成功后，此任务才会开始</span><br><span class="line">    runs-<span class="attr">on</span>: ubuntu-latest</span><br><span class="line">    <span class="attr">steps</span>:</span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Checkout</span> code</span><br><span class="line">        <span class="attr">uses</span>: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Deploy</span> to <span class="title class_">Account</span> D </span><br><span class="line">        <span class="attr">if</span>: github.<span class="property">ref</span> == <span class="string">&#x27;refs/heads/main&#x27;</span></span><br><span class="line">        <span class="attr">run</span>: npx wrangler pages deploy . --project-name=<span class="string">&quot;2527sss2&quot;</span> # &lt;-- 替换成您第三个项目的名称</span><br><span class="line">        <span class="attr">env</span>:</span><br><span class="line">          <span class="attr">CLOUDFLARE_API_TOKEN</span>: $&#123;&#123; secrets.<span class="property">tk_hxjxabc</span> &#125;&#125;      # &lt;-- 使用您为账户C创建的新密钥</span><br><span class="line">          <span class="attr">CLOUDFLARE_ACCOUNT_ID</span>: $&#123;&#123; secrets.<span class="property">id_hxjxabc</span> &#125;&#125;       # &lt;-- 使用您为账户C创建的新密钥</span><br><span class="line">          </span><br><span class="line">  <span class="attr">deploy_account_E</span>:</span><br><span class="line">    <span class="attr">needs</span>: deploy_account_D</span><br><span class="line">    runs-<span class="attr">on</span>: ubuntu-latest</span><br><span class="line">    <span class="attr">steps</span>:</span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Checkout</span> code</span><br><span class="line">        <span class="attr">uses</span>: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Deploy</span> to <span class="title class_">Account</span> E </span><br><span class="line">        <span class="attr">if</span>: github.<span class="property">ref</span> == <span class="string">&#x27;refs/heads/main&#x27;</span></span><br><span class="line">        <span class="attr">run</span>: npx wrangler pages deploy . --project-name=<span class="string">&quot;2526sss2&quot;</span> </span><br><span class="line">        <span class="attr">env</span>:</span><br><span class="line">          <span class="attr">CLOUDFLARE_API_TOKEN</span>: $&#123;&#123; secrets.<span class="property">tk_hxjxabd</span> &#125;&#125;      </span><br><span class="line">          <span class="attr">CLOUDFLARE_ACCOUNT_ID</span>: $&#123;&#123; secrets.<span class="property">id_hxjxabd</span> &#125;&#125;          </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 详细语法指南</title>
      <link href="/2025/09/24/2025.09.08_markdown-%E8%AF%A6%E7%BB%86%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/"/>
      <url>/2025/09/24/2025.09.08_markdown-%E8%AF%A6%E7%BB%86%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="1-标题-Headings"><a href="#1-标题-Headings" class="headerlink" title="1. 标题 (Headings)"></a>1. 标题 (Headings)</h3><p>  使用 # 号创建标题，支持一到六级。# 的数量代表标题的级别</p><p>   语法：</p><p>  # 一级标题</p><p>  ## 二级标题</p><p>  ### 三级标题</p><p>  #### 四级标题</p><p>  ##### 五级标题</p><p>  ###### 六级标题</p><h3 id="2-段落和换行-Paragraphs-Line-Breaks"><a href="#2-段落和换行-Paragraphs-Line-Breaks" class="headerlink" title="2. 段落和换行 (Paragraphs &amp; Line Breaks)"></a>2. 段落和换行 (Paragraphs &amp; Line Breaks)</h3><p>段落：一个或多个连续的文本行构成一个段落。段落之间需要一个或多个空行来分隔</p><p>强制换行：如果您想在段落内强制换行，可以在一行的末尾输入两个或更多的空格，然后按回车</p><h3 id="3-文字格式-Text-Formatting"><a href="#3-文字格式-Text-Formatting" class="headerlink" title="3. 文字格式 (Text Formatting)"></a>3. 文字格式 (Text Formatting)</h3><ul><li><p>粗体 (Bold): **文字** 或 __文字__</p></li><li><p>斜体 (Italic): *文字* 或 _文字_</p></li><li><p>粗斜体 (Bold &amp; Italic): ***文字*** 或 ___文字___</p></li><li><p>删除线 (Strikethrough): ~~文字~~</p></li><li><p>下划线 (Underline): HTML 标签 &lt;u&gt;文字&lt;&#x2F;u&gt; (非标准 Markdown)</p><p>  语法：</p><p>  **这是粗体**</p><p>  *这是斜体*</p><p>  ***这是粗斜体***</p><p>  ~~这是删除线~~</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>这是下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span> </span><br></pre></td></tr></table></figure><p> 示例：</p><p> <strong>这是粗体</strong> </p><p> <em>这是斜体</em></p><p> <em><strong>这是粗斜体</strong></em>  </p><p>  <del>这是删除线</del></p><p>  <u>这是下划线</u></p></li></ul><h3 id="4-列表-Lists"><a href="#4-列表-Lists" class="headerlink" title="4. 列表 (Lists)"></a>4. 列表 (Lists)</h3><ul><li><p>无序列表 (Unordered List)</p><p>使用 -, +, 或 * 标记，符号后需加一个空格。</p><p>语法：</p><blockquote><p>-或* 项目一</p><p>-或* 项目二</p><pre><code>-或\* 嵌套项目一-或\* 嵌套项目二</code></pre></blockquote><p>效果：</p><ul><li><p>项目一</p></li><li><p>项目二</p><ul><li>嵌套项目一</li><li>嵌套项目二</li></ul></li></ul></li><li><p>有序列表 (Ordered List)</p><p>使用数字加英文句点 .，然后空格接内容，数字顺序不影响最终显示。</p><p>语法：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></li></ul><h3 id="5-链接-Links"><a href="#5-链接-Links" class="headerlink" title="5. 链接 (Links)"></a>5. 链接 (Links)</h3><p>语法： </p><p>[链接显示的文字](链接地址 “可选的标题”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[访问我的博客](https://bg.363689.xyz &quot;我的个人博客&quot;)</span><br></pre></td></tr></table></figure><p>效果： <a href="https://bg.363689.xyz/" title="我的个人博客">访问我的博客</a></p><h3 id="6-图片-Images"><a href="#6-图片-Images" class="headerlink" title="6. 图片 (Images)"></a>6. 图片 (Images)</h3><ul><li><p>语法与链接类似，但在最前面加一个感叹号 !</p><p>语法：</p><p>![图片替代文字](图片地址 “可选的标题”)</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Logo](https://placehold.co/150x50/dbeafe/3b82f6?text=Logo)</span><br></pre></td></tr></table></figure></li><li><p>HTML <img> 标签插入图片（用于更多控制）</p><p>当标准 Markdown 语法不足以满足需求时（例如，需要调整图片大小、浮动、添加边框等），可以回退到使用 HTML 的 <img> 标签。这提供了更多的控制，因为它允许你使用 HTML 属性和 CSS 样式。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片URL&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;alt text&quot;</span> <span class="attr">title</span>=<span class="string">&quot;可选的标题&quot;</span> <span class="attr">width</span>=<span class="string">&quot;宽度&quot;</span> <span class="attr">height</span>=<span class="string">&quot;高度&quot;</span> <span class="attr">style</span>=<span class="string">&quot;CSS样式&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用属性：<br>src：必需。图片的 URL。<br>alt：必需。替代文本，与 Markdown 中的 alt text 相同。<br>title：可选的悬停文本，与 Markdown 中的 title 相同。<br>width：设置图片的宽度（可以为像素值 px 或百分比 %）。<br>height：设置图片的高度（可以为像素值 px 或百分比 %）。<br>style：通过 CSS 样式来控制图片，这是最强大的地方，可以设置边框、外边距、浮动、甚至一些高级效果。</p><p>示例（调整大小）：<br>这张图片宽度为200像素  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885_960_720.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;风景图&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><img src="https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885_960_720.jpg" alt="风景图" width="200"><p>示例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885_960_720.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;风景图&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 2px solid blue; border-radius: 5px; margin: 10px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 0.9em; color: gray;&quot;</span>&gt;</span>这是带蓝色边框的居中图片。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><div style="text-align: center;"><img src="https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885_960_720.jpg" alt="风景图" width="300" style="border: 2px solid blue; border-radius: 5px; margin: 10px;"><p style="font-size: 0.9em; color: gray;">这是带蓝色边框的居中图片。</p></div></li></ul><h3 id="7-引用-Blockquotes"><a href="#7-引用-Blockquotes" class="headerlink" title="7. 引用 (Blockquotes)"></a>7. 引用 (Blockquotes)</h3><p>引用(Blockquote)是一种常用于引述他人话语、文章段落或者突出显示某段文字的格式。它的语法非常简单。</p><ul><li><p>基本用法</p><p>在要引用的文本段落前加上一个大于号 &gt;</p><p>语法：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这里是一段引用的文字。它会自动被格式化，通常会以缩进或者左侧边框的形式显示。</span><br></pre></td></tr></table></figure><p> 渲染效果：</p><blockquote><p>这里是一段引用的文字。它会自动被格式化，通常会以缩进或者左侧边框的形式显示。</p></blockquote></li><li><p>多段落引用<br>如果你想引用多个段落，可以在每个段落前都加上 &gt;</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是第一个引用的段落。</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; 这是第二个引用的段落。在段落之间留一个空行，并在新段落前也加上 `&gt;`。</span><br></pre></td></tr></table></figure><p>渲染效果：</p><blockquote><p>这是第一个引用的段落。</p><blockquote><p>这是第二个引用的段落。在段落之间留一个空行，并在新段落前也加上 &gt;。</p></blockquote></blockquote></li><li><p>懒加载模式</p><p>对于一个连续的长段落，你也可以只在第一行前面加上 &gt;，后面的行会自动被包含在引用中，直到遇到一个空行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一个很长的引用段落，为了方便书写，我只在第一行的开头加了大于号。</span><br><span class="line">接下来的几行文字，即使前面没有大于号，也会被视为同一次引用的一部分。</span><br><span class="line">直到这里为止。</span><br><span class="line"></span><br><span class="line">这一行就不在引用内了。</span><br></pre></td></tr></table></figure><p>渲染效果：</p><blockquote><p>这是一个很长的引用段落，为了方便书写，我只在第一行的开头加了大于号。<br>接下来的几行文字，即使前面没有大于号，也会被视为同一次引用的一部分。<br>直到这里为止。</p></blockquote><p>这一行就不在引用内了。</p></li><li><p>嵌套引用</p><p> 引用可以嵌套使用，只需要增加 &gt; 的数量即可。</p><p> 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是第一层引用。</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; 这是嵌套的第二层引用。</span><br><span class="line">&gt; &gt;</span><br><span class="line">&gt; &gt; &gt; 这是更深一层的第三层引用。</span><br><span class="line">&gt; &gt; &gt;</span><br><span class="line">&gt; 回到第一层引用。</span><br></pre></td></tr></table></figure><p> 渲染效果：</p><blockquote><p>这是第一层引用。</p><blockquote><p>这是嵌套的第二层引用。</p><blockquote><p>这是更深一层的第三层引用。</p></blockquote></blockquote><p>回到第一层引用。</p></blockquote></li><li><p>在引用中使用其他 Markdown 语法</p><p>引用块内几乎可以包含所有其他的 Markdown 元素，比如标题、列表、粗体、代码块等。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; ### 这是一个在引用中的三级标题</span><br><span class="line"></span><br><span class="line">&gt; 1. 这是引用中的一个 **有序列表** 项。</span><br><span class="line">&gt; 2. 这是列表的第二项，包含一些 `行内代码`。</span><br><span class="line">&gt; - 这是一个 *无序列表* 项。</span><br><span class="line"></span><br><span class="line">&gt; ```python</span><br><span class="line">&gt; # 这是一个代码块</span><br><span class="line">&gt; print(&quot;Hello, Markdown!&quot;)</span><br><span class="line">  ```</span><br></pre></td></tr></table></figure><p>渲染效果：</p><blockquote><h3 id="这是一个在引用中的三级标题"><a href="#这是一个在引用中的三级标题" class="headerlink" title="这是一个在引用中的三级标题"></a>这是一个在引用中的三级标题</h3></blockquote><blockquote><ol><li>这是引用中的一个 有序列表 项。</li><li>这是列表的第二项，包含一些<code>行内代码</code>。</li></ol><ul><li>这是一个 无序列表 项。</li></ul></blockquote><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个代码块</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, Markdown!&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="8-代码-Code"><a href="#8-代码-Code" class="headerlink" title="8. 代码 (Code)"></a>8. 代码 (Code)</h3><p>  行内代码 (Inline Code)</p><p>  使用一对反引号&#96; 包裹</p><p>  语法： 这行代码是 let name &#x3D; “Markdown”;</p><p>  代码块 (Code Block)</p><p>  使用三对反引号 包裹，并可以在第一组反引号后指定语言（如 javascript, python, bash）以实现语法高亮。</p><p>  示例：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 示例：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ```javascript</span><br><span class="line">  function sayHello() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    console.log(&quot;Hello, world!&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ```</span><br></pre></td></tr></table></figure><p>  JavaScript 效果：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  示例：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">```bash</span><br><span class="line"># 列出当前目录的文件和文件夹</span><br><span class="line"></span><br><span class="line">ls -la</span><br><span class="line"></span><br><span class="line"># 输出一条消息到终端</span><br><span class="line"></span><br><span class="line">echo &quot;这是一个 Bash 脚本示例&quot;</span><br><span class="line"></span><br><span class="line"># 进入 &#x27;documents&#x27; 文件夹</span><br><span class="line"></span><br><span class="line">cd documents/</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>  Bash&#x2F;Shell 效果：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出当前目录的文件和文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -la</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出一条消息到终端</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;这是一个 Bash 脚本示例&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 &#x27;documents&#x27; 文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> documents/</span><br></pre></td></tr></table></figure><h3 id="9-表格-Tables"><a href="#9-表格-Tables" class="headerlink" title="9. 表格 (Tables)"></a>9. 表格 (Tables)</h3><p>基本语法</p><p>Markdown 表格使用管道符 | 来定义单元格和列，使用连字符 - 来分隔表头和表格主体。</p><p>基本结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 表头 1 | 表头 2 | 表头 3 |</span><br><span class="line">|---|---|---|</span><br><span class="line">| 内容 1 | 内容 2 | 内容 3 |</span><br><span class="line">| 内容 4 | 内容 5 | 内容 6 |</span><br></pre></td></tr></table></figure><p>渲染效果：</p><table><thead><tr><th>表头 1</th><th>表头 2</th><th>表头 3</th></tr></thead><tbody><tr><td>内容 1</td><td>内容 2</td><td>内容 3</td></tr><tr><td>内容 4</td><td>内容 5</td><td>内容 6</td></tr></tbody></table><p>关键点：</p><p>第一行是表头，第二行是分隔符行，用于将表头和表格内容分开。</p><p>第三行及以后是表格的每一行数据。</p><p>每一行都由管道符 | 分隔单元格。</p><p>最外侧的管道符 | 是可选的，但为了美观和清晰，建议加上。</p><p>分隔符行中的连字符 - 数量至少需要一个，但为了对齐美观，可以增加多个。</p><p>对齐方式</p><p>您可以在分隔符行中使用冒号 : 来控制列的对齐方式。</p><p>:— 或 —左对齐（默认）</p><p>:–: 居中对齐</p><p>—: 右对齐</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 居中 | 右对齐 |</span><br><span class="line">| :--- | :--: | ---: |</span><br><span class="line">| 文本 | 文本 | 文本 |</span><br><span class="line">| 更多内容 | 更多内容 | 更多内容 |</span><br></pre></td></tr></table></figure><p>渲染效果：</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">文本</td><td align="center">文本</td><td align="right">文本</td></tr><tr><td align="left">更多内容</td><td align="center">更多内容</td><td align="right">更多内容</td></tr></tbody></table><p>在单元格内使用其他 Markdown 语法<br>表格的单元格内可以包含几乎所有的行内 Markdown 格式，例如链接、粗体、斜体、删除线、代码等。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">| 格式 | 示例 | 描述 |</span><br><span class="line">|---|---|---|</span><br><span class="line">| **粗体** | `**Bold Text**` | 使文本加粗。 |</span><br><span class="line">| *斜体* | `*Italic Text*` | 使文本倾斜。 |</span><br><span class="line">| `代码` | `` `code()` `` | 用于显示简短的代码片段。 |</span><br><span class="line">| [链接](https://www.google.com) | `[链接](https://www.google.com)` | 创建一个超链接。 |</span><br><span class="line">| ~~删除线~~ | `~~Strikethrough~~` | 给文本添加删除线。 |</span><br><span class="line">| 换行 | 使用 `&lt;br&gt;` 标签 | 可以在单元格内强制换行。 |</span><br></pre></td></tr></table></figure><p>渲染效果：</p><table><thead><tr><th>格式</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>*<em>粗体</em>*</td><td><strong>Bold Text</strong></td><td>使文本加粗。</td></tr><tr><td>*斜体*</td><td><em>Italic Text</em></td><td>使文本倾斜。</td></tr><tr><td>`代码&#96;</td><td><code>code()</code></td><td>用于显示简短的代码片段。</td></tr><tr><td>[链接](<a href="https://www.google.com/">https://www.google.com</a>)</td><td><a href="https://www.google.com/">链接</a></td><td>创建一个超链接。</td></tr><tr><td>~~删除线~~</td><td><del>Strikethrough</del></td><td>给文本添加删除线。</td></tr><tr><td>换行</td><td>使用 <code>&lt;br&gt;</code> 标签</td><td>可以在单元格内强制换行。</td></tr></tbody></table><p>包含管道符 |<br>如果你的单元格内容本身就包含管道符 |，你需要使用它的 HTML 实体编码 &#124; 来代替。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 名称 | 描述 |</span><br><span class="line">|---|---|</span><br><span class="line">| 管道符 | 这是 `&amp;#124;` 字符的示例。 |</span><br></pre></td></tr></table></figure><p>渲染效果：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>管道符</td><td>这是&#124; 字符的示例。</td></tr></tbody></table><ol start="10"><li><h3 id="分割线-Horizontal-Rule"><a href="#分割线-Horizontal-Rule" class="headerlink" title="分割线 (Horizontal Rule)"></a>分割线 (Horizontal Rule)</h3><p>在一行中使用三个或更多的 *, -, 或 _</p><p>语法：</p><p>-–</p><p>***</p><hr></li><li><h3 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h3><p><em>需要明确一点：纯粹的、标准的 Markdown 语法本身并不支持设置字体颜色。 Markdown 的设计初衷是为了简化内容创作，专注于文本的结构（如标题、列表、粗体），而不是外观样式（如颜色、字体大小）。不过，由于大多数 Markdown 解析器都兼容 HTML，我们可以通过内联 HTML 的方式来给文本添加颜色。最常用的方法是使用 <span> 标签配合 style 属性，或者使用已经不被推荐但仍然有效的 <font> 标签。</em></p></li></ol><ul><li><p>使用 <span> 标签（推荐）<br>  这是最现代、最灵活的方法，符合当前的网页标准 (CSS)。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:颜色名或十六进制代码&quot;</span>&gt;</span>你的文本<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>  示例：</p><p>  我想把这段文字设置成 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以使用十六进制颜色代码，比如 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:#008000&quot;</span>&gt;</span>绿色<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者设置为 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:rgb(0, 0, 255)&quot;</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>&lt;font&gt;</code> 标签（不推荐）</p><p><code>&lt;font&gt;</code> 标签在旧的 HTML 标准 (HTML4) 中使用，现在已经被废弃，不推荐在新的项目中使用。但因为简单直观，在很多 Markdown 环境中仍然有效。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;颜色名或十六进制代码&quot;</span>&gt;</span>你的文本<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="12"><li><h3 id="任务列表（Task-List）"><a href="#任务列表（Task-List）" class="headerlink" title="任务列表（Task List）"></a>任务列表（Task List）</h3></li></ol><p>语法:</p><p>任务列表的语法是在标准的无序列表项（使用 -, *, 或 +）后面加上一个方括号 []。</p><p>[ ]：表示一个未完成的任务。注意：[ 和 ] 之间必须有一个空格。</p><p>[x]：表示一个已完成的任务。注意：x 可以是小写也可以是大写，但小写更常见。</p><p>基本结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [x] 完成报告的第一部分</span><br><span class="line">- [ ] 撰写邮件通知团队</span><br><span class="line">- [ ] 安排下周的会议</span><br></pre></td></tr></table></figure><p>渲染效果：</p><ul><li><input checked="" disabled="" type="checkbox"> 完成报告的第一部分</li><li><input disabled="" type="checkbox"> 撰写邮件通知团队</li><li><input disabled="" type="checkbox"> 安排下周的会议</li></ul><p>如何使用</p><ul><li><p>创建列表：</p><p>就像创建普通的无序列表一样，以 -, *, 或 + 开头。</p></li><li><p>添加复选框：</p><p>在列表项的文本前，加上 [ ] (未完成) 或 [x] (已完成)。</p></li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#### 项目A的待办事项</span><br><span class="line"></span><br><span class="line">- [x] 需求分析和文档编写</span><br><span class="line">- [x] UI/UX 设计初稿</span><br><span class="line">- [ ] 前端开发</span><br><span class="line">    - [x] 搭建项目框架</span><br><span class="line">    - [ ] 实现登录页面</span><br><span class="line">    - [ ] 对接用户数据API</span><br><span class="line">- [ ] 后端开发</span><br><span class="line">    - [ ] 数据库设计</span><br><span class="line">    - [ ] 编写用户认证接口</span><br><span class="line">- [ ] 测试和部署</span><br><span class="line"></span><br><span class="line">#### 购物清单</span><br><span class="line"></span><br><span class="line">* [ ] 牛奶</span><br><span class="line">* [x] 面包</span><br><span class="line">* [ ] 鸡蛋</span><br></pre></td></tr></table></figure><p>渲染效果：</p><h4 id="项目A的待办事项"><a href="#项目A的待办事项" class="headerlink" title="项目A的待办事项"></a>项目A的待办事项</h4><ul><li><input checked="" disabled="" type="checkbox"> 需求分析和文档编写</li><li><input checked="" disabled="" type="checkbox"> UI&#x2F;UX 设计初稿</li><li><input disabled="" type="checkbox"> 前端开发<ul><li><input checked="" disabled="" type="checkbox"> 搭建项目框架</li><li><input disabled="" type="checkbox"> 实现登录页面</li><li><input disabled="" type="checkbox"> 对接用户数据API</li></ul></li><li><input disabled="" type="checkbox"> 后端开发<ul><li><input disabled="" type="checkbox"> 数据库设计</li><li><input disabled="" type="checkbox"> 编写用户认证接口</li></ul></li><li><input disabled="" type="checkbox"> 测试和部署</li></ul><h4 id="购物清单"><a href="#购物清单" class="headerlink" title="购物清单"></a>购物清单</h4><ul><li><input disabled="" type="checkbox"> 牛奶</li><li><input checked="" disabled="" type="checkbox"> 面包</li><li><input disabled="" type="checkbox"> 鸡蛋</li></ul><p>交互性<br>一个重要的特性是，在许多支持任务列表的 Markdown 渲染器（如 GitHub 的评论区、Typora 编辑器）中，这些复选框是可以点击的。当你点击一个复选框时，它会自动在 [ ] 和 [x] 之间切换，并保存更改。</p><p>总结<br>任务列表是 Markdown 一个非常实用和直观的扩展功能，它结合了列表的结构化和任务管理的功能性。记住核心语法 - [ ] 和 - [x] 就可以了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo博客（二）</title>
      <link href="/2025/09/23/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A22/"/>
      <url>/2025/09/23/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A22/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装主题"><a href="#一、安装主题" class="headerlink" title="一、安装主题"></a>一、安装主题</h2><h3 id="1-Git安裝"><a href="#1-Git安裝" class="headerlink" title="1. Git安裝"></a>1. Git安裝</h3><p>1.1 在博客根目录里安装最新版主题<br>anzhiyu主题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><p>butterfly主题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>1.2. 第一次使用需要安装 pug 以及 stylus 的渲染器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="2-应用主题"><a href="#2-应用主题" class="headerlink" title="2. 应用主题"></a>2. 应用主题</h3><p>修改 hexo 配置文件_config.yml，把主题改为anzhiyu或butterfly</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">anzhiyu</span></span><br></pre></td></tr></table></figure><h3 id="3-覆盖配置"><a href="#3-覆盖配置" class="headerlink" title="3. 覆盖配置"></a>3. 覆盖配置</h3><p>覆盖配置可以使主题配置放置在anzhiyu或butterfly目录之外，避免在更新主题时丢失自定义的配置。</p><p>如果你是linux系统就执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -rf ./themes/butterfly/_config.yml ./_config.butterfly.yml</span><br></pre></td></tr></table></figure><p>如果你是windows系统就请手动将&#x2F;themes&#x2F;anzhiyu&#x2F;_config.yml(&#x2F;themes&#x2F;butterfly&#x2F;_config.yml)复制到根目录下并重命名为_config.butterfly.yml即可。</p><p>以后如果修改任何主题配置，都只需修改 _config.anzhiyu.yml(_config.butterfly.yml) 的配置即可。<br>也可以用cmd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy <span class="string">&quot;themes\butterfly\_config.yml&quot;</span> <span class="string">&quot;_config.butterfly.yml&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-基础配置"><a href="#4-基础配置" class="headerlink" title="4. 基础配置"></a>4. 基础配置</h3><p>Hexo 全局配置文件：_config.yml<br>官方文档：<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p><p>Butterfly 主题配置文件：_config.butterfly.yml<br>官方文档：<a href="https://butterfly.js.org/">https://butterfly.js.org</a></p><p>注意：</p><ul><li>只要存在于 _config.anzhiyu.yml 的配置都是高优先级，修改原 _config.yml 是无效的。</li><li>每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对 _config.anzhiyu.yml 同步修改。</li><li>想查看覆盖配置有没有生效，可以通过 hexo g –debug 查看命令行输出。</li><li>如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的</li></ul><h3 id="5-配置主题与主站配置文件"><a href="#5-配置主题与主站配置文件" class="headerlink" title="5. 配置主题与主站配置文件"></a>5. 配置主题与主站配置文件</h3><p>到这一步主题部署就完成了，就是这么简单！！！</p><p><span style="color:#008000">本地预览</span></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure><p><span style="color:#008000">推送更新</span></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl; hexo g; hexo d</span><br></pre></td></tr></table></figure><h2 id="二、主要配置"><a href="#二、主要配置" class="headerlink" title="二、主要配置"></a>二、主要配置</h2><h3 id="1-生成标签页"><a href="#1-生成标签页" class="headerlink" title="1. 生成标签页"></a>1. 生成标签页</h3><ul><li>执行以下命令生成标签页</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><ul><li>找到 source&#x2F;tags&#x2F;index.md 这个文件，修改添加 type: “tags”</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2025-07-05 03:36:02</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">top_img: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="2-生成分类页"><a href="#2-生成分类页" class="headerlink" title="2. 生成分类页"></a>2. 生成分类页</h3><ul><li>执行以下命令生成分类页</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><ul><li>找到 source&#x2F;categories&#x2F;index.md 这个文件，修改添加 type: “categories”</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2025-07-05 03:36:48</span><br><span class="line">aside: false</span><br><span class="line">top_img: false</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>剩下的工作就是配置_config.yml和_config.anzhiyu.yml文件，修改博客参数。</p><h3 id="3-配置文章模版"><a href="#3-配置文章模版" class="headerlink" title="3. 配置文章模版"></a>3. 配置文章模版</h3><p>&#x2F;scaffolds目录下有几个模版文件，其中</p><ul><li>post.md：新建博文模版</li><li>page.md：新建标签页模版</li></ul><ul><li>post.md模版，仅供参考</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125; <span class="comment">#【必需】页面标题</span></span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125; <span class="comment">#【必需】页面创建日期</span></span><br><span class="line"><span class="attr">updated:</span> <span class="comment">#【可选】页面更新日期</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment">#【可选】文章标签</span></span><br><span class="line"><span class="attr">categories:</span> <span class="comment">#【可选】文章分类</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#【可选】文章关键字</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#【可选】文章描述</span></span><br><span class="line"><span class="attr">top:</span> <span class="comment"># 1 置顶</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="comment">#【可选】文章顶部图片</span></span><br><span class="line"><span class="attr">comments:</span> <span class="comment">#【可选】显示文章评论模块(默认 true)</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">https://img.090227.xyz/file/ae62475a131f3734a201c.png</span> <span class="comment">#【可选】文章缩略图(如果没有设置 top_img,文章页顶部将显示缩略图，可设为 false/图片地址/留空)</span></span><br><span class="line"><span class="attr">toc:</span> <span class="comment">#【可选】显示文章 TOC(默认为设置中 toc 的 enable 配置)</span></span><br><span class="line"><span class="attr">toc_number:</span> <span class="comment">#【可选】显示 toc_number(默认为设置中 toc 的 number 配置)</span></span><br><span class="line"><span class="attr">toc_style_simple:</span> <span class="comment">#【可选】显示 toc 简洁模式</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="comment">#【可选】显示文章版权模块(默认为设置中 post_copyright 的 enable 配置)</span></span><br><span class="line"><span class="attr">copyright_author:</span> <span class="comment">#【可选】文章版权模块的文章作者</span></span><br><span class="line"><span class="attr">copyright_author_href:</span> <span class="comment">#【可选】文章版权模块的文章作者链接</span></span><br><span class="line"><span class="attr">copyright_url:</span> <span class="comment">#【可选】文章版权模块的文章作者链接</span></span><br><span class="line"><span class="attr">copyright_info:</span> <span class="comment">#【可选】文章版权模块的版权声明文字</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="comment">#【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</span></span><br><span class="line"><span class="attr">katex:</span> <span class="comment">#【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)</span></span><br><span class="line"><span class="attr">aplayer:</span> <span class="comment">#【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="comment">#【可选】配置代码框是否展开(true/false)(默认为设置中 highlight_shrink 的配置)</span></span><br><span class="line"><span class="attr">aside:</span> <span class="comment">#【可选】显示侧边栏 (默认 true)</span></span><br><span class="line"><span class="attr">swiper_index:</span> <span class="number">10</span> <span class="comment">#【可选】首页轮播图配置 index 索引，数字越小越靠前</span></span><br><span class="line"><span class="attr">top_group_index:</span> <span class="number">10</span> <span class="comment">#【可选】首页右侧卡片组配置, 数字越小越靠前</span></span><br><span class="line"><span class="attr">ai:</span> <span class="comment">#【可选】文章ai摘要</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">&quot;#fff&quot;</span> <span class="comment">#【可选】文章主色，必须是16进制颜色且有6位，不可缩减，例如#ffffff 不可写成#fff</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="string">&lt;div</span> <span class="string">class=&quot;video-container&quot;&gt;</span></span><br><span class="line">[<span class="string">up主专用，视频内嵌代码贴在这</span>]</span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">.video-container</span> &#123;</span><br><span class="line">    <span class="attr">position:</span> <span class="string">relative;</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">100</span><span class="string">%;</span></span><br><span class="line">    <span class="attr">padding-top:</span> <span class="number">56.25</span><span class="string">%;</span> <span class="string">/*</span> <span class="number">16</span><span class="string">:9</span> <span class="string">aspect</span> <span class="string">ratio</span> <span class="string">(height/width</span> <span class="string">=</span> <span class="number">9</span><span class="string">/16</span> <span class="string">*</span> <span class="number">100</span><span class="string">%)</span> <span class="string">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">.video-container</span> <span class="string">iframe</span> &#123;</span><br><span class="line">    <span class="attr">position:</span> <span class="string">absolute;</span></span><br><span class="line">    <span class="attr">top:</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">    <span class="attr">left:</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">100</span><span class="string">%;</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">100</span><span class="string">%;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><ul><li>page.md模版，仅供参考</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125; <span class="comment">#【必需】页面标题</span></span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125; <span class="comment">#【必需】页面创建日期</span></span><br><span class="line"><span class="attr">type:</span> <span class="comment">#【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置</span></span><br><span class="line"><span class="attr">updated:</span> <span class="comment">#【可选】页面更新日期</span></span><br><span class="line"><span class="attr">comments:</span> <span class="comment">#【可选】显示页面评论模块(默认 true)</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#【可选】页面描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#【可选】页面关键字</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">https://img.090227.xyz/file/ae62475a131f3734a201c.png</span> <span class="comment">#【可选】页面顶部图片</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="comment">#【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</span></span><br><span class="line"><span class="attr">katex:</span> <span class="comment">#【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)</span></span><br><span class="line"><span class="attr">aside:</span> <span class="comment">#【可选】显示侧边栏 (默认 true)</span></span><br><span class="line"><span class="attr">aplayer:</span> <span class="comment">#【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="comment">#【可选】配置代码框是否展开(true/false)(默认为设置中 highlight_shrink 的配置)</span></span><br><span class="line"><span class="attr">top_single_background:</span> <span class="comment">#【可选】部分页面的顶部模块背景图片</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="三、-更多功能"><a href="#三、-更多功能" class="headerlink" title="三、 更多功能"></a>三、 更多功能</h2><ul><li><p>新建博文命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 这是一篇新的博文</span><br></pre></td></tr></table></figure></li><li><p>新建标签页命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 新建的标签页</span><br></pre></td></tr></table></figure></li><li><p>文章置顶</p><ul><li>安装插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-topindex --save</span><br></pre></td></tr></table></figure><ul><li>设置置顶</li></ul><p>给需要置顶的文章加入top参数，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  ---</span><br><span class="line">title: 每天一个linux命令</span><br><span class="line">date: 2017-01-23 11:41:48</span><br><span class="line">top: 1</span><br><span class="line">categories:</span><br><span class="line">- 运维</span><br><span class="line">tags:</span><br><span class="line">- linux命令</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>如果存在多个置顶文章，top后的参数越大，越靠前</p></li><li><p>开启本地搜索</p><p>你需要安装 hexo-generator-search，根据它的文档去做相应配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>设置主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">CDN:</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="四、-添加全屏模式"><a href="#四、-添加全屏模式" class="headerlink" title="四、 添加全屏模式"></a>四、 添加全屏模式</h2><h3 id="1-在source-css文件夹下新建custom-css文件，添加内容："><a href="#1-在source-css文件夹下新建custom-css文件，添加内容：" class="headerlink" title="1. 在source&#x2F;css文件夹下新建custom.css文件，添加内容："></a>1. 在source&#x2F;css文件夹下新建custom.css文件，添加内容：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* =================================================== */</span></span><br><span class="line"><span class="comment">/* ==       最终版 - 仅控制宽度，不影响侧边栏    == */</span></span><br><span class="line"><span class="comment">/* =================================================== */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这些样式只在 body 标签有一个叫 .fullscreen-mode 的 class 时才会生效 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* --- Part 1: 针对【文章页面】的全屏样式 --- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定位到文章页最外层容器 .post，并让其撑满 */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.fullscreen-mode</span> <span class="selector-class">.post</span> <span class="selector-id">#body-wrap</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.fullscreen-mode</span> <span class="selector-class">.post</span> <span class="selector-id">#content-inner</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.fullscreen-mode</span> <span class="selector-class">.post</span> <span class="selector-id">#post</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 移除文章内容的宽度限制 */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.fullscreen-mode</span> <span class="selector-class">.post</span> <span class="selector-id">#article-container</span><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span> <span class="meta">!important</span>; <span class="comment">/* 给左右留一点点边距，防止文字贴边 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐藏文章页顶部大图和底部版权区，以获得更好全屏效果 */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.fullscreen-mode</span> <span class="selector-class">.post</span> <span class="selector-id">#header</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.fullscreen-mode</span> <span class="selector-class">.post</span> <span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* --- Part 2: 针对【主页】文章列表的全屏样式 --- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定位到主页最外层容器 .page，并移除其宽度限制 */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.fullscreen-mode</span> <span class="selector-class">.page</span> <span class="selector-id">#content-inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 给主页的文章卡片列表区域加一点边距，防止卡片贴边 */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.fullscreen-mode</span> <span class="selector-class">.page</span> <span class="selector-id">#recent-posts</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* =================================================== */</span></span><br><span class="line"><span class="comment">/* ==      Part 3: 移动端适配 (响应式设计)       == */</span></span><br><span class="line"><span class="comment">/* =================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="comment">/* 上面的 @media screen and (max-width: 768px) 的意思是：</span></span><br><span class="line"><span class="comment">    “如果屏幕宽度小于或等于 768px (典型的平板和手机宽度)，</span></span><br><span class="line"><span class="comment">    就执行花括号 &#123; &#125; 里的所有样式。”</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 在手机上，减小文章页的左右边距 */</span></span><br><span class="line">  <span class="selector-tag">body</span><span class="selector-class">.fullscreen-mode</span> <span class="selector-class">.post</span> <span class="selector-id">#article-container</span><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">15px</span> <span class="meta">!important</span>; <span class="comment">/* 左右边距从 40px 大幅减小到 15px */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 在手机上，减小主页文章列表的左右边距 */</span></span><br><span class="line">  <span class="selector-tag">body</span><span class="selector-class">.fullscreen-mode</span> <span class="selector-class">.page</span> <span class="selector-id">#recent-posts</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">15px</span> <span class="meta">!important</span>; <span class="comment">/* 左右边距从 40px 大幅减小到 15px */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-在source-js文件夹下新建mode-switcher-js文件，添加内容："><a href="#2-在source-js文件夹下新建mode-switcher-js文件，添加内容：" class="headerlink" title="2. 在source&#x2F;js文件夹下新建mode-switcher.js文件，添加内容："></a>2. 在source&#x2F;js文件夹下新建mode-switcher.js文件，添加内容：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIFE to avoid polluting global scope</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Wait for the DOM to be fully loaded</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">CLASS_NAME</span> = <span class="string">&#x27;fullscreen-mode&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">STORAGE_KEY</span> = <span class="string">&#x27;theme_fullscreen_mode&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">BUTTON_ID</span> = <span class="string">&#x27;fullscreen-toggle-btn&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the container for the button</span></span><br><span class="line">    <span class="keyword">const</span> rightsideConfig = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;rightside-config-hide&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the container doesn&#x27;t exist, do nothing</span></span><br><span class="line">    <span class="keyword">if</span> (!rightsideConfig) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --- 1. Create the button ---</span></span><br><span class="line">    <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    button.<span class="property">id</span> = <span class="variable constant_">BUTTON_ID</span>;</span><br><span class="line">    button.<span class="property">type</span> = <span class="string">&#x27;button&#x27;</span>;</span><br><span class="line">    button.<span class="property">title</span> = <span class="string">&#x27;切换全屏模式&#x27;</span>;</span><br><span class="line">    button.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;fas fa-expand&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add the button to the page</span></span><br><span class="line">    rightsideConfig.<span class="title function_">appendChild</span>(button);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --- 2. Function to apply the mode ---</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">applyMode</span> = (<span class="params">isFullScreen</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (isFullScreen) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="variable constant_">CLASS_NAME</span>);</span><br><span class="line">        button.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;fas fa-compress&quot;&gt;&lt;/i&gt;&#x27;</span>; <span class="comment">// Change icon to &quot;compress&quot;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="variable constant_">CLASS_NAME</span>);</span><br><span class="line">        button.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;fas fa-expand&quot;&gt;&lt;/i&gt;&#x27;</span>; <span class="comment">// Change icon to &quot;expand&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --- 3. Add click event listener to the button ---</span></span><br><span class="line">    button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> isCurrentlyFullScreen = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="variable constant_">CLASS_NAME</span>);</span><br><span class="line">      <span class="comment">// Toggle the mode and save the new state</span></span><br><span class="line">      <span class="title function_">applyMode</span>(!isCurrentlyFullScreen);</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="variable constant_">STORAGE_KEY</span>, !isCurrentlyFullScreen);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --- 4. Check localStorage on page load and apply the saved mode ---</span></span><br><span class="line">    <span class="keyword">const</span> savedMode = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">STORAGE_KEY</span>);</span><br><span class="line">    <span class="comment">// If savedMode is &#x27;true&#x27;, apply fullscreen, otherwise default to not fullscreen</span></span><br><span class="line">    <span class="title function_">applyMode</span>(savedMode === <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="3-修改-config-butterfly-yml"><a href="#3-修改-config-butterfly-yml" class="headerlink" title="3. 修改_config.butterfly.yml"></a>3. 修改_config.butterfly.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/mode-switcher.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后在右下角的控制按钮里多了一个全屏切换。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo博客（一）</title>
      <link href="/2025/09/23/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/09/23/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ul><li>域名</li><li><a href="https://github.com/">github</a></li><li><a href="https://dash.cloudflare.com/">cloudfare</a></li></ul><h2 id="二、软件安装"><a href="#二、软件安装" class="headerlink" title="二、软件安装"></a>二、软件安装</h2><h3 id="1-Node"><a href="#1-Node" class="headerlink" title="1. Node"></a>1. Node</h3><p>1.1 打开Node官网，下载和自己系统相配的Node的安装程序，否则会出现安装问题。下载地址：<a href="https://nodejs.org/en">https://nodejs.org/en</a></p><p>1.2 下载后安装，安装的目录可以使用默认目录C:&#x2F;Program Files&#x2F;nodejs&#x2F;</p><p>1.3 安装完成后，检查是否安装成功。在键盘按下win + R键，输入CMD，然后回车，打开CMD窗口，执行node -v命令，看到版本信息，则说明安装成功。</p><p>1.4 修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成华为云镜像源。打开CMD窗口，运行如下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://mirrors.huaweicloud.com/repository/npm/</span><br></pre></td></tr></table></figure><h3 id="2-Git"><a href="#2-Git" class="headerlink" title="2. Git"></a>2. Git</h3><p>2.1 进入官网下载适合你当前系统的 Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>2.2 下载后傻瓜式安装Git即可，安装的目录最好使用默认目录C:&#x2F;Program Files&#x2F;Git</p><p>2.3 点击电脑开始菜单即可看见Git CMD、Git Bash、Git GUI</p><ul><li>Git CMD 是windows 命令行的指令风格</li><li>Git Bash 是linux系统的指令风格（建议使用）</li><li>Git GUI是图形化界面（新手学习不建议使用）</li></ul><h3 id="3-配置-Git-密钥并连接至-Github"><a href="#3-配置-Git-密钥并连接至-Github" class="headerlink" title="3. 配置 Git 密钥并连接至 Github"></a>3. 配置 Git 密钥并连接至 Github</h3><p>常用 Git 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config -l  //查看所有配置</span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure><p>3.1. 配置用户名和邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>通过git config -l 检查是否配置成功。</p><p>3.2 配置公钥连接Github<br>3.2.1 执行以下命令生成ssh公钥，此公钥用于你的 计算机连接Github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>提示Enter file in which to save the key直接一路回车即可，新手小白不推荐设置密钥<br>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到以下文件</p><ul><li>id_rsa(私钥)</li><li>id_rsa.pub(公钥)<br>用记事本打开上述图片中的公钥id_rsa.pub，复制里面的内容，然后开始在github中配置ssh密钥。<br>3.2.2 将 SSH KEY 配置到 GitHub<br>进入github，点击右上角头像 选择settings，进入设置页后选择 SSH and GPG keys，名字随便起，公钥填到Key那一栏。<br>3.2.3 测试连接，输入以下命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>第一次连接会提示Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])?，输入yes即可<br>出现连接到账户的信息，说明已经大功告成，至此完成了环境准备工作。</p><p>3.3 创建GitHub.io仓库</p><p>3.3.1 点击右上角的+按钮，选择New repository，创建一个&lt;用户名&gt;.github.io的仓库。</p><p>3.3.2 仓库名字的格式必须为：&lt;用户名&gt;.github.io (注意：前缀必须为用户名，此为预览博客需要，后期可修改仓库名)</p><p>3.3.3 可见性必须选择 Public 方便第一次部署检查问题，点击 Creat repository 进行创建即可</p><h3 id="4-初始化-Hexo-博客"><a href="#4-初始化-Hexo-博客" class="headerlink" title="4. 初始化 Hexo 博客"></a>4. 初始化 Hexo 博客</h3><p>4.1 创建一个文件夹来保存博客源码（我这里选的路径为D:&#x2F;Blog），在文件夹内右键鼠标，选择Open Git Bash here</p><p>4.2 在Git BASH输入如下命令安装 Hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli &amp;&amp; hexo -v</span><br></pre></td></tr></table></figure><p>4.3 安装完后输入hexo -v验证是否安装成功。</p><p>4.4 初始化 Hexo 项目安装相关依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog-demo</span><br><span class="line">cd blog-demo</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p>4.5 初始化项目后，blog-demo有如下结构：</p><ul><li>node_modules：依赖包</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>.npmignore：发布时忽略的文件（可忽略）</li><li>_config.landscape.yml：主题的配置文件</li><li>config.yml：博客的配置文件</li><li>package.json：项目名称、描述、版本、运行和开发等信</li></ul><p>4.6 输入以下命令启动项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到正常网页的效果，说明你的博客已经构建成功了。</p><h3 id="5-将静态博客挂载到-GitHub-Pages"><a href="#5-将静态博客挂载到-GitHub-Pages" class="headerlink" title="5. 将静态博客挂载到 GitHub Pages"></a>5. 将静态博客挂载到 GitHub Pages</h3><p>5.1 安装 hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>5.2 修改_config.yml文件<br>在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。<br>修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为main代表主分支（注意缩进）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:xuhxjx/xuhxjx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>5.3 修改好配置后，运行如下命令，将代码部署到 GitHub（Hexo三连）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Git BASH终端</span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  </span><br></pre></td></tr></table></figure><p> 或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// VSCODE终端</span><br><span class="line">hexo cl; hexo g; hexo d</span><br></pre></td></tr></table></figure><p><span style="color:#008000">说明：</span></p><ul><li>hexo clean：删除之前生成的文件，可以用hexo cl缩写。</li><li>hexo generate：生成静态文章，可以用hexo g缩写</li><li>hexo deploy：部署文章，可以用hexo d缩写</li></ul><p>注意：deploy时可能要你输入 username 和 password。</p><p>如果出现Deploy done，则说明部署成功了。</p><h3 id="6-将静态博客挂载到-Cloudflare-Pages"><a href="#6-将静态博客挂载到-Cloudflare-Pages" class="headerlink" title="6.将静态博客挂载到 Cloudflare Pages"></a>6.将静态博客挂载到 Cloudflare Pages</h3><p>6.1 在 Workers 和 Pages 中选择 Pages 的 连接到 Git</p><p>6.2 然后登录你Blog仓库对应的GitHub帐号</p><p>6.3 点击保存并部署后等待部署完成即可。</p><h3 id="7-命令说明"><a href="#7-命令说明" class="headerlink" title="7. 命令说明"></a>7. 命令说明</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo generate        # 生成静态文件</span><br><span class="line"></span><br><span class="line">hexo deploy          # 部署至远程仓库</span><br><span class="line"></span><br><span class="line">git add .            # 添加所有更改到本地 git</span><br><span class="line"></span><br><span class="line">git commit -m &quot;update&quot;   # 描述本次更改</span><br><span class="line"></span><br><span class="line">git push origin main     # 推送到远程仓库</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Claw搭建哪吒面板</title>
      <link href="/2025/09/23/2025.09.09_claw%E6%90%AD%E5%BB%BA%E5%93%AA%E5%90%92%E9%9D%A2%E6%9D%BF/"/>
      <url>/2025/09/23/2025.09.09_claw%E6%90%AD%E5%BB%BA%E5%93%AA%E5%90%92%E9%9D%A2%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="1-哪吒项目地址："><a href="#1-哪吒项目地址：" class="headerlink" title="1. 哪吒项目地址："></a>1. 哪吒项目地址：</h3><p>github公库：<a href="https://github.com/nezhahq/nezha">https://github.com/nezhahq/nezha</a><br>github镜像：<a href="https://github.com/nezhahq/nezha/pkgs/container/nezha">https://github.com/nezhahq/nezha/pkgs/container/nezha</a></p><h3 id="2-创建面板容器步骤："><a href="#2-创建面板容器步骤：" class="headerlink" title="2. 创建面板容器步骤："></a>2. 创建面板容器步骤：</h3><p>2.1 在<a href="https://eu-central-1.run.claw.cloud/" title="claw">爪云</a>，用&gt;180天的github帐号登陆<br>2.2 选择合适的地区后，进入 App Launchpad &gt; Create App<br>2.3 填写配置参数：  </p><ul><li><p>Application name:<br>nazhamb</p></li><li><p>Imgage name:<br>ghcr.io&#x2F;nezhahq&#x2F;nezha:v1.13.2</p></li><li><p>Network:<br>端口：8080<br>自定义域名：nz.363689.xyz</p></li><li><p>Local Storage:  </p><ul><li>点add</li><li>Capacity：<br>1或2</li><li>Mount Path：<br>&#x2F;dashboard&#x2F;data</li></ul></li></ul><p><em>2.4启动部署，等状态为 Running 即可</em></p><h3 id="3-配置反向代理容器"><a href="#3-配置反向代理容器" class="headerlink" title="3. 配置反向代理容器"></a>3. 配置反向代理容器</h3><ul><li><p>Application name:<br>nazhafd</p></li><li><p>Imgage name:<br>nginx(默认)</p></li><li><p>Network:<br>端口：80<br>协议：grpcs:&#x2F;&#x2F;<br>自定义域名：fd.363689.xyz</p></li><li><p>Configmaps:</p><ul><li><p>点add  </p></li><li><p>File Name：<br>&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</p></li><li><p>File content：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">upstream dashboard &#123;</span><br><span class="line">    server nzmb.ns-api32p0p.svc.cluster.local:8008;</span><br><span class="line">    keepalive 512;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 http2;</span><br><span class="line">    server_name nzmb.ns-api32p0p.svc.cluster.local;</span><br><span class="line"></span><br><span class="line">    underscores_in_headers on;</span><br><span class="line"></span><br><span class="line">    location ^~ /proto.NezhaService/ &#123;</span><br><span class="line">        grpc_set_header Host $host;</span><br><span class="line">        grpc_set_header nz-realip $remote_addr;</span><br><span class="line">        grpc_read_timeout 600s;</span><br><span class="line">        grpc_send_timeout 600s;</span><br><span class="line">        grpc_socket_keepalive on;</span><br><span class="line">        client_max_body_size 10m;</span><br><span class="line">        grpc_buffer_size 4m;</span><br><span class="line">        grpc_pass grpc://dashboard;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><span style="color:red">注意：ns-api32p0p.svc.cluster.local为面板的Private Address里的地址，并去掉https:&#x2F;&#x2F;，此处有两个要修改</span></p></li></ul></li></ul><h3 id="4-配置哪吒面板："><a href="#4-配置哪吒面板：" class="headerlink" title="4. 配置哪吒面板："></a>4. 配置哪吒面板：</h3><p>当上面两容器部署完正常runing并自定义域名设置好后就可以打开哪吒面板了如：<a href="https://nz.363689.xyz/">https://nz.363689.xyz</a><br>4.1 修改密码：<br>管理后台，个人信息，更新个人资料<br>4.2 Agent对接地址:<br>在系统设置中Agent对接地址:<br>nf.363689.xyz:80<br>4.3 自定义代码（样式和脚本）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ↓↓↓↓ 最终配置，集成了新功能 ↓↓↓↓ --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Part 1: Your existing frontend JavaScript settings --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 1. 自定义桌面和手机背景图</span><br><span class="line">  window.CustomBackgroundImage = &quot;https://cdn.jsdelivr.net/gh/xuhxjx/myimg@main/wallpaper_1.jpg&quot;;</span><br><span class="line">  window.CustomMobileBackgroundImage = &quot;https://cdn.jsdelivr.net/gh/xuhxjx/myimg@main/IMG_5251.JPG&quot;;</span><br><span class="line"></span><br><span class="line">  // 2. 自定义 Logo</span><br><span class="line">  window.CustomLogo = &quot;https://cdn.jsdelivr.net/gh/xuhxjx/myimg@main/logo.png&quot;;</span><br><span class="line"></span><br><span class="line">  // 3. 自定义描述文字</span><br><span class="line">  window.CustomDesc = &quot;服务器状态监控面板&quot;;</span><br><span class="line"></span><br><span class="line">  // 4. 隐藏默认的动画小人插图</span><br><span class="line">  window.DisableAnimatedMan = true;</span><br><span class="line"></span><br><span class="line">  // 5. 强制使用暗色主题</span><br><span class="line">  window.ForceTheme = &quot;dark&quot;;</span><br><span class="line"></span><br><span class="line">  // 6. 开启强制使用 SVG 旗帜</span><br><span class="line">  window.ForceUseSvgFlag = true;</span><br><span class="line"></span><br><span class="line">  // --- V1 新增功能 ---</span><br><span class="line">  </span><br><span class="line">  // 7. 在卡片上显示实时上下行流量</span><br><span class="line">  window.ShowNetTransfer = true;</span><br><span class="line"></span><br><span class="line">  // 8. 强制显示世界地图</span><br><span class="line">  window.ForceShowMap = false;</span><br><span class="line"></span><br><span class="line">  // 9. 在手机视图下固定顶部服务器名称</span><br><span class="line">  window.FixedTopServerName = true;</span><br><span class="line"></span><br><span class="line">  // 10. 添加自定义外部链接 (请自行修改链接和名称)</span><br><span class="line">  window.CustomLinks = &#x27;[&#123;\&quot;link\&quot;:\&quot;https://www.google.com\&quot;,\&quot;name\&quot;:\&quot;谷歌搜索\&quot;&#125;,&#123;\&quot;link\&quot;:\&quot;https://github.com\&quot;,\&quot;name\&quot;:\&quot;GitHub\&quot;&#125;]&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- ↑↑↑↑  以上为所有有效配置 ↑↑↑↑ --&gt;</span><br></pre></td></tr></table></figure><p>4.4 哪吒扎针<br>在后台”安装命令”选择”linux”就自动复制命令了。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/nezhahq/scripts/main/agent/install.sh -o agent.sh &amp;&amp; chmod +x agent.sh &amp;&amp; env NZ_SERVER=nf.363689.xyz:80 NZ_TLS=false NZ_CLIENT_SECRET=IW0S5ke8JHvHoLF2EsCp5cpJcmwlc7TD ./agent.sh</span><br></pre></td></tr></table></figure><p>在vps上扎针吧！</p><h3 id="5-配置面板服务器显示"><a href="#5-配置面板服务器显示" class="headerlink" title="5. 配置面板服务器显示"></a>5. 配置面板服务器显示</h3><p>哪吒面板后台，编辑服务器<br>公开备注：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;billingDataMod&quot;: &#123;</span><br><span class="line">    &quot;startDate&quot;: &quot;2025-07-08T12:58:17.636Z&quot;,</span><br><span class="line">    &quot;endDate&quot;: &quot;2099-07-08T12:58:17.636Z&quot;,</span><br><span class="line">    &quot;autoRenewal&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;cycle&quot;: &quot;Month&quot;,</span><br><span class="line">    &quot;amount&quot;: &quot;Free&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;planDataMod&quot;: &#123;</span><br><span class="line">    &quot;bandwidth&quot;: &quot;30Mbps&quot;,</span><br><span class="line">    &quot;trafficVol&quot;: &quot;1TB/Month&quot;,</span><br><span class="line">    &quot;trafficType&quot;: &quot;2&quot;,</span><br><span class="line">    &quot;IPv4&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;IPv6&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;networkRoute&quot;: &quot;BGP&quot;,</span><br><span class="line">    &quot;extra&quot;: &quot;洛杉矶&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-配置面板通知"><a href="#6-配置面板通知" class="headerlink" title="6. 配置面板通知"></a>6. 配置面板通知</h3><p>6.1 编辑通知</p><ul><li>名称：telegram</li><li>url：<a href="https://api.telegram.org/bot">https://api.telegram.org/bot</a><span style="color:red">8047792960:AAEH3GeVLSr3A0VMf-ndgm74tseIj_6iccg</span>&#x2F;sendMessage?chat_id&#x3D;7571093178&amp;text&#x3D;#NEZHA#</li><li>名称：电报通知</li><li>其它默认</li></ul><p><em>6.2 编辑分组</em><br>   编辑通知分组：</p><ul><li>名称：电报通知</li><li>通知：telegram</li></ul><h3 id="7-警报规则"><a href="#7-警报规则" class="headerlink" title="7. 警报规则"></a>7. 警报规则</h3><p>编辑报警规则  </p><h5 id="7-1-离线通知"><a href="#7-1-离线通知" class="headerlink" title="7.1 离线通知"></a>7.1 离线通知</h5><ul><li>名称：离线通知</li><li>规则：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;type&quot;:&quot;offline&quot;,&quot;duration&quot;:10,&quot;cover&quot;:0&#125;]</span><br></pre></td></tr></table></figure><ul><li>通知组：电报通知</li><li>触发模式：总是</li><li><input checked="" disabled="" type="checkbox"> 启用</li></ul><h5 id="7-2-CPU-内存"><a href="#7-2-CPU-内存" class="headerlink" title="7.2 CPU+内存"></a>7.2 CPU+内存</h5><ul><li>名称：CPU+内存</li><li>规则：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;type&quot;:&quot;cpu&quot;,&quot;max&quot;:50,&quot;duration&quot;:10,&quot;cover&quot;:0&#125;,&#123;&quot;type&quot;:&quot;memory&quot;,&quot;min&quot;:20,&quot;duration&quot;:20,&quot;cover&quot;:0&#125;]</span><br></pre></td></tr></table></figure><ul><li>通知组：电报通知</li><li>触发模式：总是</li><li><input checked="" disabled="" type="checkbox"> 启用</li></ul><h5 id="7-3-200G双向流量超限通知"><a href="#7-3-200G双向流量超限通知" class="headerlink" title="7.3 200G双向流量超限通知"></a>7.3 200G双向流量超限通知</h5><ul><li>名称：200G双向流量超限通知</li><li>规则：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;type&quot;: &quot;transfer_all_cycle&quot;,</span><br><span class="line">    &quot;max&quot;: 214748364800,</span><br><span class="line">    &quot;cycle_start&quot;: &quot;2025-09-01T00:00:00+08:00&quot;,</span><br><span class="line">    &quot;cycle_interval&quot;: 1,</span><br><span class="line">    &quot;cycle_unit&quot;: &quot;month&quot;,</span><br><span class="line">    &quot;cover&quot;: 1,</span><br><span class="line">    &quot;ignore&quot;: &#123;&quot;5&quot;: true, &quot;6&quot;: true, &quot;7&quot;: true, &quot;8&quot;: true&#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>通知组：电报通知</li><li>触发模式：总是</li><li><input checked="" disabled="" type="checkbox"> 启用</li></ul><h5 id="7-4-200G单向流量超限通知"><a href="#7-4-200G单向流量超限通知" class="headerlink" title="7.4 200G单向流量超限通知"></a>7.4 200G单向流量超限通知</h5><ul><li>名称：200G单向流量超限通知</li><li>规则：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;type&quot;: &quot;transfer_out_cycle&quot;,</span><br><span class="line">    &quot;max&quot;: 214748364800,</span><br><span class="line">    &quot;cycle_start&quot;: &quot;2025-09-01T00:00:00+08:00&quot;,</span><br><span class="line">    &quot;cycle_interval&quot;: 1,</span><br><span class="line">    &quot;cycle_unit&quot;: &quot;month&quot;,</span><br><span class="line">    &quot;cover&quot;: 1,</span><br><span class="line">    &quot;ignore&quot;: &#123;&quot;1&quot;: true&#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>通知组：电报通知</li><li>触发模式：总是</li><li><input checked="" disabled="" type="checkbox"> 启用</li></ul><h5 id="7-4-500G单向流量超限通知"><a href="#7-4-500G单向流量超限通知" class="headerlink" title="7.4 500G单向流量超限通知"></a>7.4 500G单向流量超限通知</h5><ul><li>名称：500G单向流量超限通知</li><li>规则：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;type&quot;: &quot;transfer_out_cycle&quot;,</span><br><span class="line">    &quot;max&quot;: 536870912000,</span><br><span class="line">    &quot;cycle_start&quot;: &quot;2025-09-01T00:00:00+08:00&quot;,</span><br><span class="line">    &quot;cycle_interval&quot;: 1,</span><br><span class="line">    &quot;cycle_unit&quot;: &quot;month&quot;,</span><br><span class="line">    &quot;cover&quot;: 1,</span><br><span class="line">    &quot;ignore&quot;: &#123;&quot;10&quot;: true&#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>通知组：电报通知</li><li>触发模式：总是</li><li><input checked="" disabled="" type="checkbox"> 启用</li></ul><h5 id="7-5-1TB双向流量超限通知"><a href="#7-5-1TB双向流量超限通知" class="headerlink" title="7.5 1TB双向流量超限通知"></a>7.5 1TB双向流量超限通知</h5><ul><li>名称：1TB双向流量超限通知</li><li>规则：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;type&quot;: &quot;transfer_all_cycle&quot;,</span><br><span class="line">    &quot;max&quot;: 1099511627776,</span><br><span class="line">    &quot;cycle_start&quot;: &quot;2025-09-01T00:00:00+08:00&quot;,</span><br><span class="line">    &quot;cycle_interval&quot;: 1,</span><br><span class="line">    &quot;cycle_unit&quot;: &quot;month&quot;,</span><br><span class="line">    &quot;cover&quot;: 1,</span><br><span class="line">    &quot;ignore&quot;: &#123;&quot;9&quot;: true&#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>通知组：电报通知</li><li>触发模式：总是</li><li><input checked="" disabled="" type="checkbox"> 启用</li></ul><h3 id="8-服务"><a href="#8-服务" class="headerlink" title="8. 服务"></a>8. 服务</h3><p>8.1 电信</p><ul><li>名称：电信-湖南</li><li>目标：113.240.117.108:80</li><li>类型：TCPing</li><li>间隔：60</li><li>最大延迟时间：350</li></ul><p>8.2 移动</p><ul><li>名称：移动-北京</li><li>目标：222.35.73.1:80</li><li>类型：TCPing</li><li>间隔：60</li><li>最大延迟时间：350</li></ul><p>8.3 联通</p><ul><li>名称：联通-广东</li><li>目标：112.90.211.100:80</li><li>类型：TCPing</li><li>间隔：60</li><li>最大延迟时间：350</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯ipv6的vps用docker-compose.yml部署双面板和openlist</title>
      <link href="/2025/09/23/2025.09.15_%E7%BA%AFipv6%E7%9A%84vps%E7%94%A8docker-compose-yml%E9%83%A8%E7%BD%B2%E7%94%A8%E5%8F%8C%E9%9D%A2%E6%9D%BF/"/>
      <url>/2025/09/23/2025.09.15_%E7%BA%AFipv6%E7%9A%84vps%E7%94%A8docker-compose-yml%E9%83%A8%E7%BD%B2%E7%94%A8%E5%8F%8C%E9%9D%A2%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h4 id="1-一台VPS：确保您可以通过-SSH-正常登录，内存-512"><a href="#1-一台VPS：确保您可以通过-SSH-正常登录，内存-512" class="headerlink" title="1. 一台VPS：确保您可以通过 SSH 正常登录，内存&gt;512"></a>1. 一台VPS：确保您可以通过 SSH 正常登录，内存&gt;512</h4><h4 id="2-一个域名：并且必须将这个域名的-DNS-管理权交给-Cloudflare"><a href="#2-一个域名：并且必须将这个域名的-DNS-管理权交给-Cloudflare" class="headerlink" title="2. 一个域名：并且必须将这个域名的 DNS 管理权交给 Cloudflare"></a>2. 一个域名：并且必须将这个域名的 DNS 管理权交给 Cloudflare</h4><h2 id="二、安装-Docker-和-Docker-Compose-运行环境"><a href="#二、安装-Docker-和-Docker-Compose-运行环境" class="headerlink" title="二、安装 Docker 和 Docker Compose (运行环境)"></a>二、安装 Docker 和 Docker Compose (运行环境)</h2><p>在安装面板之前，我们需要先在您的 NAT VPS 上安装 Docker 运行环境</p><h4 id="1-SSH-登录到您的-NAT-VPS"><a href="#1-SSH-登录到您的-NAT-VPS" class="headerlink" title="1. SSH 登录到您的 NAT VPS"></a>1. SSH 登录到您的 NAT VPS</h4><h4 id="2-安装-nano-对于-Debian-Ubuntu-系统-最常见-，只需要执行一行命令来安装它："><a href="#2-安装-nano-对于-Debian-Ubuntu-系统-最常见-，只需要执行一行命令来安装它：" class="headerlink" title="2. 安装 nano 对于 Debian &#x2F; Ubuntu 系统 (最常见)，只需要执行一行命令来安装它："></a>2. 安装 nano 对于 Debian &#x2F; Ubuntu 系统 (最常见)，只需要执行一行命令来安装它：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y nano</span><br></pre></td></tr></table></figure><h4 id="3-执行-Docker-官方一键安装脚本"><a href="#3-执行-Docker-官方一键安装脚本" class="headerlink" title="3. 执行 Docker 官方一键安装脚本:"></a>3. 执行 Docker 官方一键安装脚本:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line"><span class="built_in">sudo</span> sh get-docker.sh</span><br></pre></td></tr></table></figure><p>这个脚本会自动检测您的系统，并安装最新版本的 Docker Engine 和 Docker Compose 插件</p><h4 id="4-验证安装："><a href="#4-验证安装：" class="headerlink" title="4. 验证安装："></a>4. 验证安装：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose version</span><br></pre></td></tr></table></figure><p>如果您能看到版本号输出而没有报错，说明安装成功</p><h2 id="三、安装并配置Komari、nezha双面板与openlist"><a href="#三、安装并配置Komari、nezha双面板与openlist" class="headerlink" title="三、安装并配置Komari、nezha双面板与openlist"></a>三、安装并配置Komari、nezha双面板与openlist</h2><h4 id="1-两种方式配置安装"><a href="#1-两种方式配置安装" class="headerlink" title="1. 两种方式配置安装"></a>1. 两种方式配置安装</h4><h4 id="1-1-一键生成docker-compose-yml"><a href="#1-1-一键生成docker-compose-yml" class="headerlink" title="1.1 一键生成docker-compose.yml"></a>1.1 一键生成docker-compose.yml</h4><p>文件为了避免任何格式错误，请完整复制下面这个灰色代码框里的所有内容，将您的个人信息替换进去，然后一次性粘贴到您的SSH终端中，按回车键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; docker-compose.yml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">services:</span></span><br><span class="line"><span class="string">  # Komari 面板服务</span></span><br><span class="line"><span class="string">  komari:</span></span><br><span class="line"><span class="string">    container_name: komari</span></span><br><span class="line"><span class="string">    image: ghcr.io/komari-monitor/komari:latest</span></span><br><span class="line"><span class="string">    network_mode: &quot;host&quot;</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - ./komari_data:/app/data</span></span><br><span class="line"><span class="string">    environment:</span></span><br><span class="line"><span class="string">      - TZ=Asia/Shanghai</span></span><br><span class="line"><span class="string">      - ADMIN_USERNAME=帐号</span></span><br><span class="line"><span class="string">      - ADMIN_PASSWORD=密码</span></span><br><span class="line"><span class="string">    restart: unless-stopped</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # 哪吒面板服务</span></span><br><span class="line"><span class="string">  nezha:</span></span><br><span class="line"><span class="string">    container_name: nezha</span></span><br><span class="line"><span class="string">    image: ghcr.io/nezhahq/nezha:latest</span></span><br><span class="line"><span class="string">    network_mode: &quot;host&quot;</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - ./nezha_data:/dashboard/data</span></span><br><span class="line"><span class="string">    restart: unless-stopped</span></span><br><span class="line"><span class="string">    # 如果需要配置环境变量，请在这里添加</span></span><br><span class="line"><span class="string">    # environment:</span></span><br><span class="line"><span class="string">    #   - NZ_HOST=域名</span></span><br><span class="line"><span class="string">    #   - NZ_TLS=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # openlist服务</span></span><br><span class="line"><span class="string">  openlist:</span></span><br><span class="line"><span class="string">    container_name: openlist</span></span><br><span class="line"><span class="string">    image: openlistteam/openlist:latest</span></span><br><span class="line"><span class="string">    network_mode: &quot;host&quot;</span></span><br><span class="line"><span class="string">    environment:</span></span><br><span class="line"><span class="string">      - TZ=Asia/Shanghai</span></span><br><span class="line"><span class="string">      - OPENLIST_ADMIN_PASSWORD=密码</span></span><br><span class="line"><span class="string">    volumes:</span></span><br><span class="line"><span class="string">      - ./oplist_data:/opt/openlist/data</span></span><br><span class="line"><span class="string">    restart: unless-stopped</span></span><br><span class="line"><span class="string"># 这里不再需要 volumes: 部分，因为你只用了绑定挂载</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="1-2-输入以下命令来打开-docker-compose-yml-文件"><a href="#1-2-输入以下命令来打开-docker-compose-yml-文件" class="headerlink" title="1.2 输入以下命令来打开 docker-compose.yml 文件"></a>1.2 输入以下命令来打开 docker-compose.yml 文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><p>粘贴以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  <span class="comment"># Komari 面板服务</span></span><br><span class="line">  komari:</span><br><span class="line">    container_name: komari</span><br><span class="line">    image: ghcr.io/komari-monitor/komari:latest</span><br><span class="line">    network_mode: <span class="string">&quot;host&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./komari_data:/app/data</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - ADMIN_USERNAME=帐号</span><br><span class="line">      - ADMIN_PASSWORD=密码</span><br><span class="line">    restart: unless-stopped</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 哪吒面板服务</span></span><br><span class="line">  nezha:</span><br><span class="line">    container_name: nezha</span><br><span class="line">    image: ghcr.io/nezhahq/nezha:latest</span><br><span class="line">    network_mode: <span class="string">&quot;host&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./nezha_data:/dashboard/data</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    <span class="comment"># 如果需要配置环境变量，请在这里添加</span></span><br><span class="line">    <span class="comment"># environment:</span></span><br><span class="line">    <span class="comment">#   - NZ_HOST=ne.363689.xyz</span></span><br><span class="line">    <span class="comment">#   - NZ_TLS=0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># openlist服务</span></span><br><span class="line">  openlist:</span><br><span class="line">    container_name: openlist</span><br><span class="line">    image: openlistteam/openlist:latest</span><br><span class="line">    network_mode: <span class="string">&quot;host&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - OPENLIST_ADMIN_PASSWORD=密码</span><br><span class="line">    volumes:</span><br><span class="line">      - ./oplist_data:/opt/openlist/data</span><br><span class="line">    restart: unless-stopped</span><br><span class="line"><span class="comment"># 这里不再需要 volumes: 部分，因为你只用了绑定挂载</span></span><br></pre></td></tr></table></figure><p>清空旧内容: 使用键盘上的方向键移动光标到文件开头，然后连续按 Ctrl + K 来剪切（删除）整行，直到文件变为空白</p><p>保存: 按下 Ctrl + O（不是零），然后按 Enter 键确认文件名。</p><p>退出: 按下 Ctrl + X 退出 nano 编辑器</p><h4 id="1-3-设置-oplist-data文件夹的权限，确保-Openlist-容器可以正常读写"><a href="#1-3-设置-oplist-data文件夹的权限，确保-Openlist-容器可以正常读写" class="headerlink" title="1.3 设置.&#x2F;oplist_data文件夹的权限，确保 Openlist 容器可以正常读写"></a>1.3 设置.&#x2F;oplist_data文件夹的权限，确保 Openlist 容器可以正常读写</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R 1001:1001 ./oplist_data</span><br></pre></td></tr></table></figure><h4 id="1-4-启动面板服务"><a href="#1-4-启动面板服务" class="headerlink" title="1.4 启动面板服务"></a>1.4 启动面板服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h4 id="1-5-补充监控自动拉取更新的方法"><a href="#1-5-补充监控自动拉取更新的方法" class="headerlink" title="1.5 补充监控自动拉取更新的方法"></a>1.5 补充监控自动拉取更新的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  <span class="comment"># Komari 面板服务</span></span><br><span class="line">  komari:</span><br><span class="line">    container_name: komari</span><br><span class="line">    image: ghcr.io/komari-monitor/komari:latest</span><br><span class="line">    network_mode: <span class="string">&quot;host&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./komari_data:/app/data</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - ADMIN_USERNAME=帐号</span><br><span class="line">      - ADMIN_PASSWORD=密码</span><br><span class="line">    restart: unless-stopped</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 哪吒面板服务</span></span><br><span class="line">  nezha:</span><br><span class="line">    container_name: nezha</span><br><span class="line">    image: ghcr.io/nezhahq/nezha:latest</span><br><span class="line">    network_mode: <span class="string">&quot;host&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./nezha_data:/dashboard/data</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    <span class="comment"># 如果需要配置环境变量，请在这里添加</span></span><br><span class="line">    <span class="comment"># environment:</span></span><br><span class="line">    <span class="comment">#   - NZ_HOST=域名</span></span><br><span class="line">    <span class="comment">#   - NZ_TLS=0</span></span><br><span class="line"></span><br><span class="line">  watchtower:</span><br><span class="line">    <span class="comment"># 默认监控全部容器</span></span><br><span class="line">    image: containrrr/watchtower:latest</span><br><span class="line">    container_name: watchtower</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - WATCHTOWER_INTERVAL=3600</span><br><span class="line">      <span class="comment"># - WATCHTOWER_SCHEDULE=0 0 6 * * * # cron方式</span></span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock</span><br></pre></td></tr></table></figure><h2 id="四、通过回源方式访问面板"><a href="#四、通过回源方式访问面板" class="headerlink" title="四、通过回源方式访问面板"></a>四、通过回源方式访问面板</h2><p>具体方法参考openlist的设置方法</p><h4 id="1-域名dns添加AAAA记录"><a href="#1-域名dns添加AAAA记录" class="headerlink" title="1.域名dns添加AAAA记录"></a>1.域名dns添加AAAA记录</h4><h4 id="2-创建规则"><a href="#2-创建规则" class="headerlink" title="2.创建规则"></a>2.创建规则</h4><h5 id="2-1-规则名称"><a href="#2-1-规则名称" class="headerlink" title="2.1 规则名称"></a>2.1 规则名称</h5><h5 id="2-2-当传入请求匹配时"><a href="#2-2-当传入请求匹配时" class="headerlink" title="2.2 当传入请求匹配时"></a>2.2 当传入请求匹配时</h5><table><thead><tr><th>字段</th><th>运算符</th><th>值</th></tr></thead><tbody><tr><td>主机名</td><td>等于</td><td>域名</td></tr></tbody></table><h5 id="2-3目标端口重写到"><a href="#2-3目标端口重写到" class="headerlink" title="2.3目标端口重写到"></a>2.3目标端口重写到</h5><p>8008(nazhe)</p><p>25774(komari)</p><p>2544(openlist)</p><h2 id="五、部署成功后备份、恢复、删除数据"><a href="#五、部署成功后备份、恢复、删除数据" class="headerlink" title="五、部署成功后备份、恢复、删除数据"></a>五、部署成功后备份、恢复、删除数据</h2><h4 id="1、备份数据"><a href="#1、备份数据" class="headerlink" title="1、备份数据"></a>1、备份数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r ./nezha_data ./nezha_data_backup</span><br></pre></td></tr></table></figure><h4 id="2-恢复数据"><a href="#2-恢复数据" class="headerlink" title="2. 恢复数据"></a>2. 恢复数据</h4><h5 id="2-1-停止服务："><a href="#2-1-停止服务：" class="headerlink" title="2.1 停止服务："></a>2.1 停止服务：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose down</span><br></pre></td></tr></table></figure><h5 id="2-2-恢复文件："><a href="#2-2-恢复文件：" class="headerlink" title="2.2 恢复文件："></a>2.2 恢复文件：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r ./nezha_data_backup/. ./nezha_data/</span><br></pre></td></tr></table></figure><p>最后的 &#x2F;. 是为了确保所有内容（包括隐藏文件）都被复制</p><h5 id="2-3-启动服务"><a href="#2-3-启动服务" class="headerlink" title="2.3 启动服务:"></a>2.3 启动服务:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h4 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3. 删除数据"></a>3. 删除数据</h4><h5 id="3-1-停止服务："><a href="#3-1-停止服务：" class="headerlink" title="3.1 停止服务："></a>3.1 停止服务：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose down</span><br></pre></td></tr></table></figure><h5 id="3-2-删除命令"><a href="#3-2-删除命令" class="headerlink" title="3.2 删除命令"></a>3.2 删除命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r ./nezha_data</span><br></pre></td></tr></table></figure><p>rm -r 是一个不可逆的操作，请务必确认你备份了数据再执行</p><h4 id="4-转移数据"><a href="#4-转移数据" class="headerlink" title="4. 转移数据"></a>4. 转移数据</h4><h5 id="4-1-在旧服务器上备份"><a href="#4-1-在旧服务器上备份" class="headerlink" title="4.1 在旧服务器上备份"></a>4.1 在旧服务器上备份</h5><p>首先，在新旧服务器上都停止哪吒面板的服务，避免数据冲突</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose down</span><br></pre></td></tr></table></figure><p>在旧服务器上，进入 docker-compose.yml 所在的目录，将 nezha_data 文件夹打包成一个压缩文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf nezha_data_backup.tar.gz ./nezha_data</span><br></pre></td></tr></table></figure><p>tar -czvf：这是一个打包和压缩命令，将文件夹打包成 .tar.gz 文件</p><h5 id="4-2-将备份文件传输到本地"><a href="#4-2-将备份文件传输到本地" class="headerlink" title="4.2 将备份文件传输到本地"></a>4.2 将备份文件传输到本地</h5><p>使用 scp 命令来传输文件。在你的本地电脑上打开终端，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@&lt;旧服务器IP&gt;:/path/to/nezha_data_backup.tar.gz .</span><br></pre></td></tr></table></figure><ul><li><p>&lt;旧服务器IP&gt;：替换成你旧服务器的 IP 地址。</p></li><li><p>&#x2F;path&#x2F;to&#x2F;：替换成 nezha_data_backup.tar.gz 文件在旧服务器上的路径。</p></li></ul><h5 id="4-3-将备份文件上传到新服务器"><a href="#4-3-将备份文件上传到新服务器" class="headerlink" title="4.3 将备份文件上传到新服务器"></a>4.3 将备份文件上传到新服务器</h5><p>在你的本地电脑上打开终端，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ./nezha_data_backup.tar.gz root@&lt;新服务器IP&gt;:/path/to/</span><br></pre></td></tr></table></figure><h5 id="4-4-在新服务器上恢复"><a href="#4-4-在新服务器上恢复" class="headerlink" title="4.4 在新服务器上恢复"></a>4.4 在新服务器上恢复</h5><p>进入你上传 nezha_data_backup.tar.gz 文件的目录。</p><p>解压缩文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf nezha_data_backup.tar.gz</span><br></pre></td></tr></table></figure><p>确保 nezha_data 文件夹的内容已经正确解压到 docker-compose.yml 文件所在的目录</p><p>重启服务</p><h4 id="5-使用-pwd-和-ls-命令查看文件"><a href="#5-使用-pwd-和-ls-命令查看文件" class="headerlink" title="5. 使用 pwd 和 ls 命令查看文件"></a>5. 使用 pwd 和 ls 命令查看文件</h4><h5 id="5-1-pwd：查看当前目录路径"><a href="#5-1-pwd：查看当前目录路径" class="headerlink" title="5.1 pwd：查看当前目录路径"></a>5.1 pwd：查看当前目录路径</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>pwd (Print Working Directory) 命令用于显示你当前所在的目录的完整路径。</p><h5 id="5-2-ls：查看当前目录文件"><a href="#5-2-ls：查看当前目录文件" class="headerlink" title="5.2 ls：查看当前目录文件"></a>5.2 ls：查看当前目录文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l</span><br></pre></td></tr></table></figure><p>-l 参数会显示文件的详细信息，包括权限、所有者、大小和修改日期</p><h5 id="5-3-find：查找文件路径"><a href="#5-3-find：查找文件路径" class="headerlink" title="5.3 find：查找文件路径"></a>5.3 find：查找文件路径</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&quot;your_file_name&quot;</span></span><br></pre></td></tr></table></figure><p>&#x2F;：表示从根目录开始搜索。</p><p>“your_file_name”：替换成你想要查找的实际文件名。</p><h2 id="六、更新镜像"><a href="#六、更新镜像" class="headerlink" title="六、更新镜像"></a>六、更新镜像</h2><h4 id="1-拉取最新镜像"><a href="#1-拉取最新镜像" class="headerlink" title="1 拉取最新镜像"></a>1 拉取最新镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ghcr.io/nezhahq/nezha:latest</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ghcr.io/komari-monitor/komari:latest</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull openlistteam/openlist:latest</span><br></pre></td></tr></table></figure><h4 id="2-重新创建容器"><a href="#2-重新创建容器" class="headerlink" title="2. 重新创建容器"></a>2. 重新创建容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d --force-recreate</span><br></pre></td></tr></table></figure><ul><li><p>docker compose up -d 会在后台启动你的服务。</p></li><li><p>–force-recreate 会强制 Docker 重新创建容器，即使容器的配置没有改变。这确保了你的服务会使用刚刚拉取的最新镜像</p></li></ul><h2 id="七、哪吒面板设置"><a href="#七、哪吒面板设置" class="headerlink" title="七、哪吒面板设置"></a>七、哪吒面板设置</h2><h4 id="1-修改面板密码"><a href="#1-修改面板密码" class="headerlink" title="1. 修改面板密码"></a>1. 修改面板密码</h4><h4 id="2-Agent对接地址【域名-IP-端口】"><a href="#2-Agent对接地址【域名-IP-端口】" class="headerlink" title="2. Agent对接地址【域名&#x2F;IP:端口】"></a>2. Agent对接地址【域名&#x2F;IP:端口】</h4><p>如：[2a14:67c1:a070:2::71]:8008</p><h2 id="八、探针安装"><a href="#八、探针安装" class="headerlink" title="八、探针安装"></a>八、探针安装</h2><h3 id="1-komari探针"><a href="#1-komari探针" class="headerlink" title="1. komari探针"></a>1. komari探针</h3><h4 id="1-1-通用安装命令："><a href="#1-1-通用安装命令：" class="headerlink" title="1.1 通用安装命令："></a>1.1 通用安装命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sL https://raw.githubusercontent.com/komari-monitor/komari-agent/refs/heads/main/install.sh) -e https://km.363689.xyz --auto-discovery 65XYUFUXSTekd98agpiDfW5L</span><br></pre></td></tr></table></figure><h4 id="1-2-到期通用安装："><a href="#1-2-到期通用安装：" class="headerlink" title="1.2 到期通用安装："></a>1.2 到期通用安装：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sL https://raw.githubusercontent.com/komari-monitor/komari-agent/refs/heads/main/install.sh) -e https://km.363689.xyz --auto-discovery 65XYUFUXSTekd98agpiDfW5L --valid-until 2026-12-31T00:00:00Z</span><br></pre></td></tr></table></figure><h4 id="1-3-删除探针"><a href="#1-3-删除探针" class="headerlink" title="1.3 删除探针"></a>1.3 删除探针</h4><ul><li>停止并禁用服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop komari-agent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用服务，使其不再开机自启</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> komari-agent</span><br></pre></td></tr></table></figure><ul><li>删除服务文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /etc/systemd/system/komari-agent.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li><span style="color:red">确认无任何自定义修改可以使用一行命令一键删除</span></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop komari-agent &amp;&amp; <span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> komari-agent &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">rm</span> -f /etc/systemd/system/komari-agent.service &amp;&amp; <span class="built_in">sudo</span> systemctl daemon-reload &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /opt/komari /var/log/komari</span><br></pre></td></tr></table></figure><h3 id="2-哪吒探针"><a href="#2-哪吒探针" class="headerlink" title="2. 哪吒探针"></a>2. 哪吒探针</h3><h4 id="1-1-ipv4安装命令："><a href="#1-1-ipv4安装命令：" class="headerlink" title="1.1 ipv4安装命令："></a>1.1 ipv4安装命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/nezhahq/scripts/main/agent/install.sh -o agent.sh &amp;&amp; <span class="built_in">chmod</span> +x agent.sh &amp;&amp; <span class="built_in">env</span> NZ_SERVER=nf.363689.xyz:80 NZ_TLS=<span class="literal">false</span> NZ_CLIENT_SECRET=IW0S5ke8JHvHoLF2EsCp5cpJcmwlc7TD ./agent.sh</span><br></pre></td></tr></table></figure><h4 id="1-2-ipv6安装命令："><a href="#1-2-ipv6安装命令：" class="headerlink" title="1.2 ipv6安装命令："></a>1.2 ipv6安装命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/nezhahq/scripts/main/agent/install.sh -o agent.sh &amp;&amp; <span class="built_in">chmod</span> +x agent.sh &amp;&amp; <span class="built_in">env</span> NZ_SERVER=[2a14:67c1:a070:2::71]:8008 NZ_TLS=<span class="literal">false</span> NZ_CLIENT_SECRET=O52OhEOrEMdmPKawD3tklh0YZJpNfoDJ ./agent.sh</span><br></pre></td></tr></table></figure><h4 id="1-3-恢复uuid安装参数："><a href="#1-3-恢复uuid安装参数：" class="headerlink" title="1.3 恢复uuid安装参数："></a>1.3 恢复uuid安装参数：</h4><p>NZ_UUID&#x3D;xxxxxxx</p><h4 id="1-4-删除探针"><a href="#1-4-删除探针" class="headerlink" title="1.4 删除探针"></a>1.4 删除探针</h4><ul><li>停止并卸载服务：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/nezha/agent/</span><br><span class="line">./nezha-agent service uninstall</span><br></pre></td></tr></table></figure><ul><li>删除 Agent 文件夹：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /opt/nezha/agent/</span><br></pre></td></tr></table></figure><ul><li>如果安装了多个服务并想要全部卸载，可以使用 Agent 安装脚本的卸载功能：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./agent.sh uninstall</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Warp 自动重连脚本部署指南</title>
      <link href="/2025/09/23/2025.09.10_warp-%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/"/>
      <url>/2025/09/23/2025.09.10_warp-%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="1-warp安装"><a href="#1-warp安装" class="headerlink" title="1. warp安装"></a>1. warp安装</h2><p>首次运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh &amp;&amp; bash menu.sh</span><br></pre></td></tr></table></figure><p>日常维护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warp</span><br></pre></td></tr></table></figure><p>手动重连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wg-quick down warp &amp;&gt;/dev/null; sed -i <span class="string">&quot;s/Endpoint.*/Endpoint = engage.cloudflareclient.com:4500/&quot;</span> /etc/wireguard/warp.conf; warp o</span><br></pre></td></tr></table></figure><h2 id="2-Warp-自动重连脚本部署"><a href="#2-Warp-自动重连脚本部署" class="headerlink" title="2. Warp 自动重连脚本部署"></a>2. Warp 自动重连脚本部署</h2><p>本指南将帮助您在 VPS 上部署一个脚本，以自动修复 Warp 的 IPv4 出口掉线问题</p><h4 id="2-1-创建并编辑脚本文件"><a href="#2-1-创建并编辑脚本文件" class="headerlink" title="2.1 创建并编辑脚本文件"></a>2.1 创建并编辑脚本文件</h4><p>首先，在您的 VPS 上创建一个名为 reconnect_warp.sh 的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano reconnect_warp.sh</span><br></pre></td></tr></table></figure><p>打开编辑器后，将下面的完整脚本代码复制并粘贴进去。粘贴完成后，按 Ctrl + X，然后按 Y，最后按 Enter 保存并退出。</p><p>完整脚本代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Warp 自动重启脚本</span></span><br><span class="line"><span class="comment"># 脚本会检查 IPv4 网络连通性，如果发现网络不通，就会自动修复 Warp。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试 ping 一个可靠的 IPv4 地址，例如 Google 的公共 DNS。</span></span><br><span class="line"><span class="comment"># -c 1 表示只发送一个数据包。</span></span><br><span class="line"><span class="comment"># -w 3 表示超时时间为 3 秒。</span></span><br><span class="line">ping -c 1 -w 3 8.8.8.8 &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># $? 是上一条命令的退出状态码。如果状态码不为 0，则表示 ping 失败。</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date)</span>: IPv4 network connection failed, repairing Warp...&quot;</span></span><br><span class="line">    <span class="comment"># 强制 Warp 隧道关闭，然后重新连接。</span></span><br><span class="line">    wg-quick down warp &amp;&gt;/dev/null</span><br><span class="line">    sed -i <span class="string">&quot;s/Endpoint.*/Endpoint = [engage.cloudflareclient.com:4500/](https://engage.cloudflareclient.com:4500/)&quot;</span> /etc/wireguard/warp.conf</span><br><span class="line">    warp o</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date)</span>: IPv4 network connection is active. No action needed.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="2-2-赋予脚本执行权限"><a href="#2-2-赋予脚本执行权限" class="headerlink" title="2.2 赋予脚本执行权限"></a>2.2 赋予脚本执行权限</h4><p>接下来，您需要让系统知道这个文件是一个可执行的脚本。在终端中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x reconnect_warp.sh</span><br></pre></td></tr></table></figure><h4 id="2-3-将脚本添加到定时任务-Cron"><a href="#2-3-将脚本添加到定时任务-Cron" class="headerlink" title="2.3 将脚本添加到定时任务 (Cron)"></a>2.3 将脚本添加到定时任务 (Cron)</h4><p>将脚本添加到定时任务 (Cron)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>在打开的文件末尾，新开一行并添加以下命令。这会使脚本每 5 分钟自动运行一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/5 * * * * /root/reconnect_warp.sh</span><br></pre></td></tr></table></figure><p>完成以上步骤后，即使您的 Warp 再次掉线，系统也会自动检测并修复它，您无需再手动干预。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/09/23/hello-world/"/>
      <url>/2025/09/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
